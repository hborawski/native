(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{203:function(module,exports,__webpack_require__){"use strict";__webpack_require__(138),__webpack_require__(16);var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k),Object.defineProperty(o,k2,{enumerable:!0,get:function get(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__exportStar=this&&this.__exportStar||function(m,exports){for(var p in m)"default"===p||exports.hasOwnProperty(p)||__createBinding(exports,m,p)};Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(__webpack_require__(298),exports),__exportStar(__webpack_require__(861),exports),__exportStar(__webpack_require__(862),exports),__exportStar(__webpack_require__(454),exports)},204:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),Object.defineProperty(exports,"__esModule",{value:!0}),exports.ActionTypes=exports.ACTION_EVENT_NAME=exports.BASE_IFRAME_ID=void 0,exports.BASE_IFRAME_ID="appetize-iframe",exports.ACTION_EVENT_NAME="native-action",function(ActionTypes){ActionTypes.PERFORM_COMMAND="load",ActionTypes.COMMAND_ERROR="error",ActionTypes.COMMAND_SUCCESS="success",ActionTypes.RESET_COMMANDS="reset-commands"}(exports.ActionTypes||(exports.ActionTypes={}))},298:function(module,exports,__webpack_require__){"use strict";__webpack_require__(138),__webpack_require__(16);var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k),Object.defineProperty(o,k2,{enumerable:!0,get:function get(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,"default",{enumerable:!0,value:v})}:function(o,v){o.default=v}),__importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)"default"!==k&&Object.hasOwnProperty.call(mod,k)&&__createBinding(result,mod,k);return __setModuleDefault(result,mod),result};Object.defineProperty(exports,"__esModule",{value:!0}),exports.DeviceContext=void 0;var React=__importStar(__webpack_require__(0)),getDevices_1=__webpack_require__(454);exports.DeviceContext=React.createContext({androidSelection:getDevices_1.getDefaultDevice("android"),iosSelection:getDevices_1.getDefaultDevice("ios")})},299:function(module,exports,__webpack_require__){"use strict";__webpack_require__(138),__webpack_require__(16);var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k),Object.defineProperty(o,k2,{enumerable:!0,get:function get(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__exportStar=this&&this.__exportStar||function(m,exports){for(var p in m)"default"===p||exports.hasOwnProperty(p)||__createBinding(exports,m,p)};Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(__webpack_require__(457),exports),__exportStar(__webpack_require__(458),exports),__exportStar(__webpack_require__(869),exports),__exportStar(__webpack_require__(204),exports),__exportStar(__webpack_require__(870),exports),__exportStar(__webpack_require__(871),exports),__exportStar(__webpack_require__(459),exports);var store_1=__webpack_require__(468);Object.defineProperty(exports,"store",{enumerable:!0,get:function get(){return store_1.default}});var AppetizeEmulatorController_1=__webpack_require__(469);Object.defineProperty(exports,"AppetizeEmulatorController",{enumerable:!0,get:function get(){return AppetizeEmulatorController_1.default}});var ControllerManager_1=__webpack_require__(899);Object.defineProperty(exports,"ControllerManager",{enumerable:!0,get:function get(){return ControllerManager_1.default}})},31:function(module,exports,__webpack_require__){"use strict";__webpack_require__(138),__webpack_require__(16);var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k),Object.defineProperty(o,k2,{enumerable:!0,get:function get(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__exportStar=this&&this.__exportStar||function(m,exports){for(var p in m)"default"===p||exports.hasOwnProperty(p)||__createBinding(exports,m,p)};Object.defineProperty(exports,"__esModule",{value:!0});var EmulatorRenderer_1=__webpack_require__(867);Object.defineProperty(exports,"EmulatorRenderer",{enumerable:!0,get:function get(){return EmulatorRenderer_1.default}});var DeepLinkRenderer_1=__webpack_require__(456);Object.defineProperty(exports,"DeepLinkRenderer",{enumerable:!0,get:function get(){return DeepLinkRenderer_1.default}}),__exportStar(__webpack_require__(908),exports)},454:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),Object.defineProperty(exports,"__esModule",{value:!0}),exports.getDevices=exports.getDefaultDevice=void 0,exports.getDefaultDevice=function(platform){if("android"===platform)return"nexus5";if("ios"===platform)return"iphone9";throw new Error("No device for platform: "+platform)},exports.getDevices=function(platform){if("android"===platform)return["nexus5","nexus7","nexus9","pixel4","pixel4xl","galaxytabs7"];if("ios"===platform)return["ipadair","iphone6s","iphone6splus","ipadair2","iphone9","iphone11pro","iphone11promax"];throw new Error("No devices for platform: "+platform)}},455:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),Object.defineProperty(exports,"__esModule",{value:!0}),exports.DEEP_LINKS_PARAM_KEY=exports.LOCAL_STORAGE_KEY=exports.ADDON_ID=void 0,exports.ADDON_ID="native",exports.LOCAL_STORAGE_KEY="native-device-selection",exports.DEEP_LINKS_PARAM_KEY="native-deep-links"},456:function(module,exports,__webpack_require__){"use strict";__webpack_require__(5),__webpack_require__(16);var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(0)),native_controllers_1=__webpack_require__(299),native_devices_1=__webpack_require__(203),addons_1=__webpack_require__(81),react_redux_1=__webpack_require__(300),CommandsList_1=__importDefault(__webpack_require__(903)),manager=new native_controllers_1.ControllerManager;exports.default=function(props){var apiKey=props.apiKey,platform=props.platform,extraParams=props.extraParams,storyParams=props.storyParams,deepLinkBaseUrl=props.deepLinkBaseUrl,context=props.context;if(!deepLinkBaseUrl)throw new Error("No deep link base url was specified");var device=native_devices_1.useDevice(platform);react_1.default.useEffect((function(){var onAction=function onAction(action){manager.getController(context).sendMessage({message:action})};return addons_1.addons.getChannel().on(native_controllers_1.ACTION_EVENT_NAME,onAction),function(){addons_1.addons.getChannel().off(native_controllers_1.ACTION_EVENT_NAME,onAction)}}),[context]),react_1.default.useEffect((function(){manager.getController(context).updateConfig({apiKey:apiKey,settings:{device:device},platform:platform})}),[device,apiKey,context,platform]);var storyParamsWithExtras=__assign(__assign({},storyParams),extraParams);react_1.default.useEffect((function(){var controller=manager.getController(context),newAppUrl=native_controllers_1.getFullDeepLinkUrl(deepLinkBaseUrl,storyParamsWithExtras);controller.openDeepLink(newAppUrl)}),[device,JSON.stringify(storyParamsWithExtras),deepLinkBaseUrl,apiKey,context]),react_1.default.useEffect((function(){var elementId="native-iframe-css-"+(context||""),persistentIFrameCss='\n        #root[hidden="true"] ~ #'+native_controllers_1.getAppetizeIframeId(context)+" {\n            display: none;\n        }\n    \n        #"+native_controllers_1.getAppetizeIframeId(context)+" {\n            display: none;\n        }\n        ";if(!document.head.querySelector("#"+elementId)){var style=document.createElement("style");style.innerHTML=persistentIFrameCss,style.id=elementId,document.head.appendChild(style)}}),[context]);var renderedIFrameCss="\n    #"+native_controllers_1.getAppetizeIframeId(context)+" {\n        display: block;\n    }\n    ";return react_1.default.createElement(react_redux_1.Provider,{store:native_controllers_1.store},react_1.default.createElement(react_1.default.Fragment,null,react_1.default.createElement("style",null,renderedIFrameCss),react_1.default.createElement(CommandsList_1.default,{context:context})))}},457:function(module,exports,__webpack_require__){"use strict";__webpack_require__(5),__webpack_require__(16),__webpack_require__(17),__webpack_require__(75),__webpack_require__(868),__webpack_require__(160),__webpack_require__(34),__webpack_require__(37),__webpack_require__(44);var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getAppetizeUrl=void 0,exports.getAppetizeUrl=function(_a){var launchArgs=_a.launchArgs,settings=_a.settings,apiKey=_a.apiKey;if(!apiKey)throw new Error("No appetize API key was specified");var options=__assign({xdocMsg:!0,autoplay:!0},settings);return launchArgs&&(options.params=JSON.stringify(launchArgs)),"https://appetize.io/embed/"+apiKey+"?"+new URLSearchParams(options).toString()}},458:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),Object.defineProperty(exports,"__esModule",{value:!0}),exports.updateIframeUrl=exports.getAppetizeIframe=exports.createAppetizeIframe=exports.getAppetizeIframeId=exports.getInnerDocument=void 0;var constants_1=__webpack_require__(204);exports.getInnerDocument=function(){var _a,storybookFrame=document.getElementById("storybook-preview-iframe"),innerDoc=storybookFrame?storybookFrame.contentDocument||(null===(_a=storybookFrame.contentWindow)||void 0===_a?void 0:_a.document):document;if(!innerDoc)throw new Error("The inner document was not found");return innerDoc},exports.getAppetizeIframeId=function(context){return context?constants_1.BASE_IFRAME_ID+"-"+context:constants_1.BASE_IFRAME_ID},exports.createAppetizeIframe=function(context){var innerDoc=exports.getInnerDocument(),iframe=innerDoc.createElement("iframe");return iframe.id=exports.getAppetizeIframeId(context),iframe.style.border="0",iframe.style.overflow="hidden",iframe.style.width="100vw",iframe.style.height="100vh",iframe.src="about:blank",iframe.title="appetize-embed",iframe.scrolling="no",innerDoc.body.appendChild(iframe),iframe},exports.getAppetizeIframe=function(context){var innerDoc=exports.getInnerDocument(),iframeId=exports.getAppetizeIframeId(context),appetizeFrame=innerDoc.getElementById(iframeId);if(!appetizeFrame)throw new Error("The appetize.io iframe was not found for context: "+context);return appetizeFrame},exports.updateIframeUrl=function(url,context){var iframe=exports.getAppetizeIframe(context);iframe&&iframe.src!==url&&(iframe.src=url)}},459:function(module,exports,__webpack_require__){"use strict";__webpack_require__(65),__webpack_require__(17),__webpack_require__(29),__webpack_require__(35),__webpack_require__(90),__webpack_require__(34),__webpack_require__(37),__webpack_require__(44),__webpack_require__(16);var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__generator=this&&this.__generator||function(thisArg,body){var f,y,t,g,_={label:0,sent:function sent(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return g={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return function step(op){if(f)throw new TypeError("Generator is already executing.");for(;_;)try{if(f=1,y&&(t=2&op[0]?y.return:op[0]?y.throw||((t=y.return)&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;switch(y=0,t&&(op=[2&op[0],t.value]),op[0]){case 0:case 1:t=op;break;case 4:return _.label++,{value:op[1],done:!1};case 5:_.label++,y=op[1],op=[0];continue;case 7:op=_.ops.pop(),_.trys.pop();continue;default:if(!(t=_.trys,(t=t.length>0&&t[t.length-1])||6!==op[0]&&2!==op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1],t=op;break}if(t&&_.label<t[2]){_.label=t[2],_.ops.push(op);break}t[2]&&_.ops.pop(),_.trys.pop();continue}op=body.call(thisArg,_)}catch(e){op=[6,e],y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}([n,v])}}},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.resetCommands=exports.performCommand=void 0;var axios_1=__importDefault(__webpack_require__(872)),constants_1=__webpack_require__(204);exports.performCommand=function(url,data){return function(dispatch){return __awaiter(void 0,void 0,void 0,(function(){var response,ex_1,details,_a,_b;return __generator(this,(function(_c){switch(_c.label){case 0:dispatch({type:constants_1.ActionTypes.PERFORM_COMMAND}),_c.label=1;case 1:return _c.trys.push([1,3,,4]),[4,axios_1.default.post(url,data)];case 2:return response=_c.sent(),details={message:data,response:response.data.message,successful:!0},dispatch({type:constants_1.ActionTypes.COMMAND_SUCCESS,payload:details}),[3,4];case 3:return ex_1=_c.sent(),console.error(ex_1),details={message:data,response:null===(_b=null===(_a=ex_1.response)||void 0===_a?void 0:_a.data)||void 0===_b?void 0:_b.message,successful:!1},dispatch({type:constants_1.ActionTypes.COMMAND_ERROR,payload:details}),[3,4];case 4:return[2]}}))}))}},exports.resetCommands=function(dispatch){dispatch({type:constants_1.ActionTypes.RESET_COMMANDS})}},468:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16);var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.dispatchThunk=void 0;var redux_1=__webpack_require__(924),redux_thunk_1=__importDefault(__webpack_require__(890)),reducer_1=__importDefault(__webpack_require__(891)),enhancer=redux_1.applyMiddleware(redux_thunk_1.default),store=redux_1.createStore(reducer_1.default,enhancer);exports.default=store,exports.dispatchThunk=function(thunk){return store.dispatch(thunk)}},469:function(module,exports,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function _typeof(obj){return typeof obj}:function _typeof(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}__webpack_require__(16),__webpack_require__(892),__webpack_require__(29),__webpack_require__(35),__webpack_require__(17),__webpack_require__(90),__webpack_require__(34),__webpack_require__(37),__webpack_require__(44),Object.defineProperty(exports,"__esModule",{value:!0});var lodash_1=__webpack_require__(470),deep_link_logger_1=__webpack_require__(471),iframeUtils_1=__webpack_require__(458),getAppetizeUrl_1=__webpack_require__(457),AppetizeEmulatorController=function(){function AppetizeEmulatorController(context){var _this=this;this.lastUrlMessage=void 0,this.connected=!1,this.emulatorContext=void 0,this.config=void 0,this.handleIncomingMessage=function(event){"firstFrameReceived"===event.data?(_this.connected=!0,setTimeout((function(){_this.lastUrlMessage&&_this.sendMessage({message:_this.lastUrlMessage})}),600)):"sessionEnded"===event.data&&(_this.connected=!1)},this.openDeepLink=lodash_1.debounce((function(deepLinkUrl){_this.undebouncedOpenDeepLink(deepLinkUrl)}),400),this.emulatorContext=context}return AppetizeEmulatorController.prototype.sendMessage=function(_a){var message=_a.message,requireConnection=_a.requireConnection,appetizeFrame=iframeUtils_1.getAppetizeIframe(this.emulatorContext);"object"===_typeof(message)&&"url"===message.type&&(this.lastUrlMessage=message),appetizeFrame&&appetizeFrame.contentWindow&&(this.connected||!requireConnection)&&appetizeFrame.contentWindow.postMessage(message,"*")},AppetizeEmulatorController.prototype.createEmulator=function(){iframeUtils_1.createAppetizeIframe(this.emulatorContext),window.addEventListener("message",this.handleIncomingMessage,!1)},AppetizeEmulatorController.prototype.undebouncedOpenDeepLink=function(deepLinkUrl){deep_link_logger_1.logDeepLink(deepLinkUrl),this.sendMessage({message:{type:"url",value:deepLinkUrl},requireConnection:!0})},AppetizeEmulatorController.prototype.getContext=function(){return this.emulatorContext},AppetizeEmulatorController.prototype.updateConfig=function(config){this.config=config;var appetizeUrl=getAppetizeUrl_1.getAppetizeUrl(config);iframeUtils_1.updateIframeUrl(appetizeUrl,this.emulatorContext)},AppetizeEmulatorController}();exports.default=AppetizeEmulatorController},471:function(module,exports,__webpack_require__){"use strict";__webpack_require__(138),__webpack_require__(16);var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k),Object.defineProperty(o,k2,{enumerable:!0,get:function get(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__exportStar=this&&this.__exportStar||function(m,exports){for(var p in m)"default"===p||exports.hasOwnProperty(p)||__createBinding(exports,m,p)};Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(__webpack_require__(893),exports);var DeepLinksContainer_1=__webpack_require__(894);Object.defineProperty(exports,"DeepLinksContainer",{enumerable:!0,get:function get(){return DeepLinksContainer_1.default}})},472:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),Object.defineProperty(exports,"__esModule",{value:!0}),exports.DEEP_LINKS_EVENT_ID=void 0,exports.DEEP_LINKS_EVENT_ID="native-deep-links-add"},474:function(module,exports,__webpack_require__){"use strict";var EmulatorRotation;__webpack_require__(16),Object.defineProperty(exports,"__esModule",{value:!0}),exports.RotationsList=exports.EmulatorRotation=exports.EmulatorActions=void 0,function(EmulatorActions){EmulatorActions.rotateLeft="rotateLeft",EmulatorActions.rotateRight="rotateRight",EmulatorActions.saveScreenshot="saveScreenshot"}(exports.EmulatorActions||(exports.EmulatorActions={})),function(EmulatorRotation){EmulatorRotation[EmulatorRotation.vertical=0]="vertical",EmulatorRotation[EmulatorRotation.horizontal=1]="horizontal",EmulatorRotation[EmulatorRotation.invertedVertical=2]="invertedVertical",EmulatorRotation[EmulatorRotation.invertedHorizontal=3]="invertedHorizontal"}(EmulatorRotation=exports.EmulatorRotation||(exports.EmulatorRotation={})),exports.RotationsList=[EmulatorRotation.vertical,EmulatorRotation.horizontal,EmulatorRotation.invertedVertical,EmulatorRotation.invertedHorizontal]},475:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16);var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(0));exports.default=function(_a){var children=_a.children,backgroundColor=_a.backgroundColor;return react_1.default.createElement("div",{style:{padding:"8px",margin:"8px 0",borderRadius:"8px",border:"1px solid "+backgroundColor,width:"fit-content"}},children)}},500:function(module,exports,__webpack_require__){"use strict";__webpack_require__(138),__webpack_require__(16);var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){void 0===k2&&(k2=k),Object.defineProperty(o,k2,{enumerable:!0,get:function get(){return m[k]}})}:function(o,m,k,k2){void 0===k2&&(k2=k),o[k2]=m[k]}),__exportStar=this&&this.__exportStar||function(m,exports){for(var p in m)"default"===p||exports.hasOwnProperty(p)||__createBinding(exports,m,p)};Object.defineProperty(exports,"__esModule",{value:!0}),__exportStar(__webpack_require__(860),exports)},503:function(module,exports,__webpack_require__){__webpack_require__(504),__webpack_require__(660),__webpack_require__(661),__webpack_require__(923),__webpack_require__(922),__webpack_require__(925),module.exports=__webpack_require__(864)},571:function(module,exports){},661:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__(355)},860:function(module,exports,__webpack_require__){"use strict";__webpack_require__(5),__webpack_require__(29),__webpack_require__(35),__webpack_require__(17),__webpack_require__(90),__webpack_require__(34),__webpack_require__(37),__webpack_require__(44),__webpack_require__(16);var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)},__read=this&&this.__read||function(o,n){var m="function"==typeof Symbol&&o[Symbol.iterator];if(!m)return o;var r,e,i=m.call(o),ar=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)ar.push(r.value)}catch(error){e={error:error}}finally{try{r&&!r.done&&(m=i.return)&&m.call(i)}finally{if(e)throw e.error}}return ar},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.DeviceDecorator=void 0;var react_1=__importDefault(__webpack_require__(0)),client_api_1=__webpack_require__(100),native_devices_1=__webpack_require__(203),constants_1=__webpack_require__(455),localStorageUtils_1=__webpack_require__(863);exports.DeviceDecorator=function(storyFn){var selections=__read(client_api_1.useAddonState(constants_1.ADDON_ID),1)[0]||localStorageUtils_1.restoreFromLocalStorage();return react_1.default.createElement(native_devices_1.DeviceWrapper,__assign({},selections),storyFn())}},861:function(module,exports,__webpack_require__){"use strict";__webpack_require__(5),__webpack_require__(21),__webpack_require__(29),__webpack_require__(16);var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)},__rest=this&&this.__rest||function(s,e){var t={};for(var p in s)Object.prototype.hasOwnProperty.call(s,p)&&e.indexOf(p)<0&&(t[p]=s[p]);if(null!=s&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(p=Object.getOwnPropertySymbols(s);i<p.length;i++)e.indexOf(p[i])<0&&Object.prototype.propertyIsEnumerable.call(s,p[i])&&(t[p[i]]=s[p[i]])}return t},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.DeviceWrapper=void 0;var react_1=__importDefault(__webpack_require__(0)),DeviceContext_1=__webpack_require__(298);exports.DeviceWrapper=function(_a){var children=_a.children,value=__rest(_a,["children"]),context=react_1.default.useContext(DeviceContext_1.DeviceContext);return react_1.default.createElement(DeviceContext_1.DeviceContext.Provider,{value:__assign(__assign({},context),value)},children)}},862:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16);var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.useDevice=void 0;var react_1=__importDefault(__webpack_require__(0)),DeviceContext_1=__webpack_require__(298);exports.useDevice=function(platform){var state=react_1.default.useContext(DeviceContext_1.DeviceContext);return"android"===platform?state.androidSelection:state.iosSelection}},863:function(module,exports,__webpack_require__){"use strict";__webpack_require__(5),__webpack_require__(16),__webpack_require__(56),__webpack_require__(70);var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.restoreFromLocalStorage=exports.saveToLocalStorage=exports.DEFAULT_STATE=void 0;var native_devices_1=__webpack_require__(203),constants_1=__webpack_require__(455);exports.DEFAULT_STATE={androidSelection:native_devices_1.getDefaultDevice("android"),iosSelection:native_devices_1.getDefaultDevice("ios")},exports.saveToLocalStorage=function(data){window.localStorage.setItem(constants_1.LOCAL_STORAGE_KEY,JSON.stringify(data))},exports.restoreFromLocalStorage=function(state){var data=window.localStorage.getItem(constants_1.LOCAL_STORAGE_KEY);if(!data)return __assign(__assign({},exports.DEFAULT_STATE),state);var androidDevices=native_devices_1.getDevices("android"),iosDevices=native_devices_1.getDevices("ios"),storedSelections=JSON.parse(data);return androidDevices.includes(storedSelections.androidSelection)||(storedSelections.androidSelection=native_devices_1.getDefaultDevice("android")),iosDevices.includes(storedSelections.iosSelection)||(storedSelections.iosSelection=native_devices_1.getDefaultDevice("ios")),storedSelections}},864:function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__(355).configure)([__webpack_require__(865),__webpack_require__(920)],module,!1)}).call(this,__webpack_require__(163)(module))},865:function(module,exports,__webpack_require__){var map={"./button.stories.jsx":866,"./card.stories.jsx":910,"./chips.stories.jsx":911,"./dialogs.stories.jsx":912,"./floatingButton.stories.jsx":913,"./radio.stories.jsx":914,"./slider.stories.jsx":915,"./snackbar.stories.jsx":916,"./switch.stories.jsx":917,"./tabs.stories.jsx":918,"./textfield.stories.jsx":919};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=865},866:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__(5),__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(19);__webpack_exports__.default={title:"Button"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"button"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Buttons"\nlayout: detail\nsection: components\nexcerpt: "A customizable button component with updated visual styles."\niconId: materialbutton\npath: /catalog/buttons/\n--\x3e\n\n# Buttons\n\n[Buttons](https://material.io/components/buttons/) allow users to take actions,\nand make choices, with a single tap.\n\n!["Photo of tan stone archways above a modal bottom sheet titled "Walk below the\narches" with filled "Learn more" button"](assets/buttons/buttons_hero.png)\n\n**Contents**\n\n*   [Using buttons](#using-buttons)\n*   [Text button](#text-button)\n*   [Outlined button](#outlined-button)\n*   [Contained button](#contained-button)\n*   [Toggle button](#toggle-button)\n*   [Theming](#theming-buttons)\n\n## Using buttons\n\nBefore you can use Material buttons, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n_**Note:** `<Button>` is auto-inflated as\n`<com.google.android.material.button.MaterialButton>` via\n`MaterialComponentsViewInflater` when using a non-Bridge\n`Theme.MaterialComponents.*` theme._\n\n### Making buttons accessible\n\nButtons support content labeling for accessibility and are readable by most\nscreen readers, such as TalkBack. Text rendered in buttons is automatically\nprovided to accessibility services. Additional content labels are usually\nunnecessary.\n\nFor more information on content labels, go to the\n[Android accessibility help guide](https://support.google.com/accessibility/android/answer/7158690).\n\n### Types\n\nThere are four types of buttons: 1. [Text button](#text-button), 2.\n[Outlined button](#outlined-button), 3. [Contained button](#contained-button),\n4. [Toggle button](#toggle-button)\n\n!["Button types - text, outlined, contained and toggle."](assets/buttons/buttons_types.png)\n\n## Text button\n\n[Text buttons](https://material.io/components/buttons/#text-button) are\ntypically used for less-pronounced actions, including those located in dialogs\nand cards. In cards, text buttons help maintain an emphasis on card content.\n\n### Text button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a text button with a text label.\n\n!["Text button with purple text \'Text button\' over a white background."](assets/buttons/text-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    android:id="@+id/textButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Text button"\n    style="@style/Widget.MaterialComponents.Button.TextButton"\n/>\n```\n\nIn code:\n\n```kt\ntextButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to a text button\n\nThe following example shows a text button with an icon.\n\n!["Text button with purple text \'Text button\' and \'+\' icon over a white\nbackground."](assets/buttons/text-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    ...\n    app:icon="@drawable/ic_add_24dp"\n    style="@style/Widget.MaterialComponents.Button.TextButton.Icon"\n/>\n```\n\n### Anatomy and key properties\n\nA text button has a text label, a transparent container and an optional icon.\n\n![Text button anatomy diagram](assets/buttons/text_button_anatomy.png)\n\n1.  Text label\n2.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_text_btn_text_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceButton`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `@android:color/transparent` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_btn_bg_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `0dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorPrimary` at 12% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_btn_ripple_color.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_text_btn_text_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `4dp`\n\n#### Styles\n\n| Element                | Style                                                          |\n| ---------------------- | -------------------------------------------------------------- |\n| **Default style**      | `Widget.MaterialComponents.Button.TextButton`                  |\n| **Icon style**         | `Widget.MaterialComponents.Button.TextButton.Icon`             |\n| **Full Width Buttons** | `Widget.MaterialComponents.Button.TextButton.Dialog.FullWidth` |\n\nDefault style theme attribute: `?attr/borderlessButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Outlined button\n\n[Outlined buttons](https://material.io/components/buttons/#outlined-button) are\nmedium-emphasis buttons. They contain actions that are important, but aren’t the\nprimary action in an app.\n\n### Outlined button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows an outlined button with a text label and stroked\ncontainer.\n\n!["Outlined button with purple text \'Outlined button\' and grey border over a\nwhite background."](assets/buttons/outlined-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    android:id="@+id/outlinedButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Outlined button"\n    style="?attr/materialButtonOutlinedStyle"\n/>\n```\n\nIn code:\n\n```kt\noutlinedButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to an outlined button\n\nThe following example shows an outlined button with an icon.\n\n!["Outlined button with purple text \'Outlined button\', grey border and \'+\' icon\nover a white background."](assets/buttons/outlined-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    ...\n    app:icon="@drawable/ic_add_24dp"\n    style="@style/Widget.MaterialComponents.Button.OutlinedButton.Icon"\n/>\n```\n\n### Anatomy and key properties\n\nAn outlined button has a text label, a stroked container and an optional icon.\n\n![Outlined button anatomy diagram](assets/buttons/outlined_button_anatomy.png)\n\n1.  Text label\n2.  Container\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_text_btn_text_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceButton`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `@android:color/transparent` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_btn_bg_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `?attr/colorOnSurface` at 12% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_stroke_color_selector.xml))\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `1dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `0dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorPrimary` at 12% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_btn_ripple_color.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_text_btn_text_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `4dp`\n\n#### Styles\n\nElement           | Style\n----------------- | ------------------------------------------------------\n**Default style** | `Widget.MaterialComponents.Button.OutlinedButton`\n**Icon style**    | `Widget.MaterialComponents.Button.OutlinedButton.Icon`\n\nDefault style theme attribute: `?attr/materialButtonOutlinedStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Contained button\n\n[Contained buttons](https://material.io/components/buttons/#contained-button)\nare high-emphasis, distinguished by their use of elevation and fill. They\ncontain actions that are primary to your app.\n\n_**Note** The contained button is the default style if the style is not set._\n\n### Contained button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a contained button with a text label and a filled\ncontainer.\n\n!["Contained button with white text \'Contained button\' and purple container over\na white background."](assets/buttons/contained-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    android:id="@+id/containedButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Contained button"\n/>\n```\n\n_**Note:** Since this is the default type, you don\'t need to specify a style tag\nas long as you are using a Material Components Theme. If not, set the style to\n`@style/Widget.MaterialComponents.Button`._\n\nIn code:\n\n```kt\ncontainedButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to a contained button\n\nThe following example shows a contained button with an icon.\n\n!["Contained button with white text \'Contained button\', purple container and \'+\'\nicon over a white background."](assets/buttons/contained-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    ...\n    app:icon="@drawable/ic_add_24dp"\n    style="@style/Widget.MaterialComponents.Button.Icon"\n/>\n```\n\n### Anatomy and key properties\n\nA contained button has a text label, a filled container and an optional icon.\n\n![Contained button anatomy diagram](assets/buttons/contained_button_anatomy.png)\n\n1.  Text label\n2.  Container\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceButton`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_bg_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `2dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnPrimary` at 24% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_ripple_color.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `4dp`\n\n#### Styles\n\nElement                   | Style\n------------------------- | -------------------------------------------------------\n**Default style**         | `Widget.MaterialComponents.Button`\n**Icon style**            | `Widget.MaterialComponents.Button.Icon`\n**Unelevated style**      | `Widget.MaterialComponents.Button.UnelevatedButton`\n**Unelevated icon style** | `Widget.MaterialComponents.Button.UnelevatedButton.Icon`\n\nDefault style theme attribute: `?attr/materialButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Toggle button\n\n[Toggle buttons](https://material.io/components/buttons/#toggle-button) can be\nused to select from a group of choices.\n\nThere are two types of toggle buttons:\n\n*   [Toggle button](#toggle-button)\n*   [Icon](#icon)\n\n### Toggle button\n\nTo emphasize groups of related toggle buttons, a group should share a common\ncontainer.\n\n#### Toggle button examples\n\nAPI and source code:\n\n*   `MaterialButtonToggleGroup`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButtonToggleGroup)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButtonToggleGroup.java)\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a toggle button with three buttons that have text\nlabels.\n\n!["Toggle button example for Android with text labels - \'Button 1\', \'Button 2\'\nand \'Button 3\' - and grey/purple borders over a white\nbackground."](assets/buttons/toggle-button-text.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.button.MaterialButtonToggleGroup\n    android:id="@+id/toggleButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content">\n    <Button\n        android:id="@+id/button1"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 1"\n        style="?attr/materialButtonOutlinedStyle"\n    />\n    <Button\n        android:id="@+id/button2"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 2"\n        style="?attr/materialButtonOutlinedStyle"\n    />\n    <Button\n        android:id="@+id/button3"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 3"\n        style="?attr/materialButtonOutlinedStyle"\n    />\n</com.google.android.material.button.MaterialButtonToggleGroup>\n```\n\nIn code:\n\n```kt\ntoggleButton.addOnButtonCheckedListener { toggleButton, checkedId, isChecked ->\n    // Respond to button selection\n}\n```\n\n#### Implementing an icon-only toggle button\n\nThe following example shows a toggle button with three buttons that have icons.\n\n!["Toggle buttons with icons - heart, eye and bell - and grey/purple borders\nover a white background."](assets/buttons/toggle-button.png)\n\nIn `res/values/styles.xml`:\n\n```xml\n<style name="Widget.App.Button.OutlinedButton.IconOnly" parent="Widget.MaterialComponents.Button.OutlinedButton">\n    <item name="iconPadding">0dp</item>\n    <item name="android:insetTop">0dp</item>\n    <item name="android:insetBottom">0dp</item>\n    <item name="android:paddingLeft">12dp</item>\n    <item name="android:paddingRight">12dp</item>\n    <item name="android:minWidth">48dp</item>\n    <item name="android:minHeight">48dp</item>\n</style>\n```\n\nIn the layout:\n\n```xml\n<com.google.android.material.button.MaterialButtonToggleGroup\n    ...>\n    <Button\n        ...\n        app:icon="@drawable/ic_favorite_24dp"\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n    />\n    <Button\n        ...\n        app:icon="@drawable/ic_remove_red_eye_24dp"\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n    />\n    <Button\n        ...\n        app:icon="@drawable/ic_notifications_24dp"\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n    />\n</com.google.android.material.button.MaterialButtonToggleGroup>\n```\n\n### Anatomy and key properties\n\nA toggle button has a shared stroked container, icons and/or text labels.\n\n![Toggle button anatomy](assets/buttons/toggle_button_anatomy.png)\n\n1.  Container\n2.  Icon\n\n#### Selection attributes\n\nElement                | Attribute               | Related method(s)                                | Default value\n---------------------- | ----------------------- | ------------------------------------------------ | -------------\n**Single selection**   | `app:singleSelection`   | `setSingleSelection`<br/>`isSingleSelection`     | `false`\n**Selection required** | `app:selectionRequired` | `setSelectionRequired`<br/>`isSelectionRequired` | `false`\n\n#### Styles\n\nElement           | Style\n----------------- | -----------------------------------------------------\n**Default style** | `Widget.MaterialComponents.MaterialButtonToggleGroup`\n\nDefault style theme attribute: `?attr/materialButtonToggleGroupStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n### Icon\n\nIcons can be used as toggle buttons when they allow selection, or deselection,\nof a single choice, such as marking an item as a favorite.\n\n#### Icon example\n\nAPI and source code:\n\n*   `CheckBox`\n    *   [Class description](https://developer.android.com/reference/android/widget/CheckBox)\n\n_**Note** The `CheckBox` API is just one of several inputs that can implement\nthe icon button. See other\n[selection controls](https://material.io/components/selection-controls/) for\nmore details._\n\nThe following example shows an icon that can be used independently or in items\nof a `RecyclerView`.\n\n![Toggle icon example showing 4 images, heart icon in the upper-right corner of\neach image](assets/buttons/android_toggle_button.png)\n\nIn the layout:\n\n```xml\n<CheckBox\n    android:id="@+id/icon"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:button="@drawable/sl_favourite_24dp"\n    app:buttonTint="@android:color/white"\n/>\n```\n\nIn `res/drawable/sl_favourite_24dp.xml`:\n\n```xml\n<selector>\n    <item\n        android:drawable="@drawable/ic_favourite_outlined_24dp"\n        android:state_checked="false"\n    />\n    <item\n        android:drawable="@drawable/ic_favourite_filled_24dp"\n        android:state_checked="true"\n    />\n    <item android:drawable="@drawable/ic_favourite_outlined_24dp" />\n</selector>\n```\n\nIn code:\n\n```kt\nicon.setOnCheckedChangeListener { checkBox, isChecked ->\n    // Respond to icon toggle\n}\n```\n\n## Theming buttons\n\nButtons support\n[Material Theming](https://material.io/components/buttons/#theming) and can be\ncustomized in terms of color, typography and shape.\n\n### Button theming example\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows text, outlined and contained button types with\nMaterial Theming.\n\n!["Button theming with three buttons - text, outlined and contained - with pink\ncolor theming and cut corners."](assets/buttons/button-theming.png)\n\n#### Implementing button theming\n\nUsing theme attributes and styles in `res/values/styles.xml` (themes all buttons\nand affects other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n    <item name="textAppearanceButton">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="TextAppearance.App.Button" parent="TextAppearance.MaterialComponents.Button">\n    <item name="fontFamily">@font/rubik</item>\n    <item name="android:fontFamily">@font/rubik</item>\n</style>\n\n<style name="ShapeAppearance.App.SmallComponent" parent="ShapeAppearance.MaterialComponents.SmallComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">4dp</item>\n</style>\n```\n\nor using default style theme attributes, styles and theme overlays (themes all\nbuttons but does not affect other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="borderlessButtonStyle">@style/Widget.App.Button.TextButton</item>\n    <item name="materialButtonOutlinedStyle">@style/Widget.App.Button.OutlinedButton</item>\n    <item name="materialButtonStyle">@style/Widget.App.Button</item>\n</style>\n\n<style name="Widget.App.Button.TextButton" parent="Widget.MaterialComponents.Button.TextButton">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button.TextButton</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="Widget.App.Button.OutlinedButton" parent="Widget.MaterialComponents.Button.OutlinedButton">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button.TextButton</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="Widget.App.Button" parent="Widget.MaterialComponents.Button">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="ThemeOverlay.App.Button.TextButton" parent="">\n    <item name="colorPrimary">@color/shrine_pink_900</item>\n</style>\n\n<style name="ThemeOverlay.App.Button" parent="">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n</style>\n```\n\nor using one of the styles in the layout (affects only this button):\n\n```xml\n<Button\n    ...\n    style="@style/Widget.App.Button"\n/>\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        apiKey="zv034bdme9je7c9d43chzmc2yg"\n        platform="android"\n        storyParams={{"component":"button"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/button.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories/button.stories.jsx"})},867:function(module,exports,__webpack_require__){"use strict";__webpack_require__(5),__webpack_require__(16);var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(0)),DeepLinkRenderer_1=__importDefault(__webpack_require__(456)),LaunchParamsRenderer_1=__importDefault(__webpack_require__(907));exports.default=function(props){return props.deepLinkBaseUrl?react_1.default.createElement(DeepLinkRenderer_1.default,__assign({},props)):react_1.default.createElement(LaunchParamsRenderer_1.default,__assign({},props))}},869:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),__webpack_require__(52),__webpack_require__(13),__webpack_require__(11),Object.defineProperty(exports,"__esModule",{value:!0}),exports.getFullDeepLinkUrl=void 0;exports.getFullDeepLinkUrl=function(baseDeepLinkUrl,storyParams){return baseDeepLinkUrl+"?"+function getQueryString(data){return Object.keys(data).map((function(key){return encodeURIComponent(key)+"="+encodeURIComponent(data[key])})).join("&")}(storyParams)}},870:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),Object.defineProperty(exports,"__esModule",{value:!0})},871:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),Object.defineProperty(exports,"__esModule",{value:!0}),exports.useAppDispatch=void 0;var react_redux_1=__webpack_require__(300);exports.useAppDispatch=function(){return react_redux_1.useDispatch()}},891:function(module,exports,__webpack_require__){"use strict";__webpack_require__(5),__webpack_require__(16),__webpack_require__(15);var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)};Object.defineProperty(exports,"__esModule",{value:!0});var constants_1=__webpack_require__(204),defaultState={loading:!1,commands:[]};exports.default=function(state,action){switch(void 0===state&&(state=defaultState),action.type){case constants_1.ActionTypes.PERFORM_COMMAND:return __assign(__assign({},state),{loading:!0});case constants_1.ActionTypes.COMMAND_SUCCESS:case constants_1.ActionTypes.COMMAND_ERROR:if(!action.payload)throw new Error("No payload for action: "+action.type);return __assign(__assign({},state),{loading:!1,commands:state.commands.concat(action.payload)});case constants_1.ActionTypes.RESET_COMMANDS:return __assign(__assign({},state),{commands:[]});default:return state}}},893:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),Object.defineProperty(exports,"__esModule",{value:!0}),exports.logDeepLink=void 0;var addons_1=__webpack_require__(81),constants_1=__webpack_require__(472);exports.logDeepLink=function(url){addons_1.addons.getChannel().emit(constants_1.DEEP_LINKS_EVENT_ID,url)}},894:function(module,exports,__webpack_require__){"use strict";__webpack_require__(29),__webpack_require__(35),__webpack_require__(17),__webpack_require__(90),__webpack_require__(34),__webpack_require__(37),__webpack_require__(44),__webpack_require__(15),__webpack_require__(16);var __read=this&&this.__read||function(o,n){var m="function"==typeof Symbol&&o[Symbol.iterator];if(!m)return o;var r,e,i=m.call(o),ar=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)ar.push(r.value)}catch(error){e={error:error}}finally{try{r&&!r.done&&(m=i.return)&&m.call(i)}finally{if(e)throw e.error}}return ar},__spread=this&&this.__spread||function(){for(var ar=[],i=0;i<arguments.length;i++)ar=ar.concat(__read(arguments[i]));return ar},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(0)),components_1=__webpack_require__(45),constants_1=__webpack_require__(472),DeepLinksList_1=__importDefault(__webpack_require__(895));exports.default=function(_a){var api=_a.api,active=_a.active,_b=__read(react_1.default.useState([]),2),links=_b[0],setLinks=_b[1],addUrl=function addUrl(url){setLinks((function(allLinks){return __spread(allLinks,[url])}))};return react_1.default.useEffect((function(){return api.on(constants_1.DEEP_LINKS_EVENT_ID,addUrl),function(){api.off(constants_1.DEEP_LINKS_EVENT_ID,addUrl)}}),[]),react_1.default.createElement(components_1.AddonPanel,{key:"deep-links-panel",active:Boolean(active)},react_1.default.createElement(DeepLinksList_1.default,{links:links,onClear:function clearUrls(){setLinks([])}}))}},895:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),__webpack_require__(13);var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(0)),theming_1=__webpack_require__(1),components_1=__webpack_require__(45),copy_to_clipboard_1=__importDefault(__webpack_require__(473)),DeepLinkDetails_1=__importDefault(__webpack_require__(897)),Wrapper=theming_1.styled((function(_a){var children=_a.children;return react_1.default.createElement(components_1.ScrollArea,{vertical:!0},children)}))({margin:0,padding:"10px 5px 20px"});exports.default=function(_a){var links=_a.links,onClear=_a.onClear;return react_1.default.createElement(react_1.default.Fragment,null,react_1.default.createElement(Wrapper,{title:"linksLogger"},links.map((function(link,index){return react_1.default.createElement(DeepLinkDetails_1.default,{key:link+"-"+index,link:link})}))),react_1.default.createElement(components_1.ActionBar,{actionItems:[{title:"Copy All",onClick:function onCopyClicked(){copy_to_clipboard_1.default(JSON.stringify(links))}},{title:"Clear",onClick:onClear}]}))}},897:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),__webpack_require__(898);var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(0)),components_1=__webpack_require__(45),copy_to_clipboard_1=__importDefault(__webpack_require__(473));exports.default=function(_a){var link=_a.link;return react_1.default.createElement(react_1.default.Fragment,null,react_1.default.createElement("div",{style:{display:"flex"}},react_1.default.createElement(components_1.Button,{style:{minWidth:"60px"},onClick:function onCopyClicked(){copy_to_clipboard_1.default(link)}},"Copy"),react_1.default.createElement("div",{style:{marginLeft:"16px",alignSelf:"center"}},link)),react_1.default.createElement("hr",null))}},899:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),__webpack_require__(46),__webpack_require__(47),__webpack_require__(123),Object.defineProperty(exports,"__esModule",{value:!0});var controllerFactory_1=__webpack_require__(900),ControllerManager=function(){function ControllerManager(){this.controllers=[]}return ControllerManager.prototype.createController=function(context){var controller=controllerFactory_1.getNewController(context);return controller.createEmulator(),this.controllers.push(controller),console.log("Created native storybook controller for context: "+context),controller},ControllerManager.prototype.sendMessageToControllers=function(options){this.controllers.forEach((function(controller){controller.sendMessage(options)}))},ControllerManager.prototype.getController=function(context){var result=this.controllers.find((function(controller){return controller.getContext()===context}));return result||this.createController(context)},ControllerManager}();exports.default=ControllerManager},900:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16);var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.getNewController=void 0;var AppetizeEmulatorController_1=__importDefault(__webpack_require__(469)),LocalEmulatorController_1=__importDefault(__webpack_require__(901));exports.getNewController=function(context){return Object({NODE_ENV:"production",NODE_PATH:[],STORYBOOK:"true",PUBLIC_URL:"."}).STORYBOOK_NATIVE_LOCAL_EMULATOR?new LocalEmulatorController_1.default(context):new AppetizeEmulatorController_1.default(context)}},901:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),Object.defineProperty(exports,"__esModule",{value:!0});var native_types_1=__webpack_require__(474),lodash_1=__webpack_require__(470),deep_link_logger_1=__webpack_require__(471),commandsSlice_1=__webpack_require__(459),store_1=__webpack_require__(468),rotationUtils_1=__webpack_require__(902),LocalEmulatorController=function(){function LocalEmulatorController(context){var _this=this;this.emulatorContext=void 0,this.config=void 0,this.rotationMode=native_types_1.EmulatorRotation.vertical,this.openDeepLink=lodash_1.debounce((function(deepLinkUrl){_this.undebouncedOpenDeepLink(deepLinkUrl)}),400),this.emulatorContext=context}return LocalEmulatorController.prototype.updateRotation=function(newRotation){var _a;this.rotationMode=newRotation;var thunk=commandsSlice_1.performCommand("/rotation",{platform:null===(_a=this.config)||void 0===_a?void 0:_a.platform,rotationMode:newRotation});store_1.dispatchThunk(thunk)},LocalEmulatorController.prototype.saveScreenshot=function(){var _a,thunk=commandsSlice_1.performCommand("/screenshot",{platform:null===(_a=this.config)||void 0===_a?void 0:_a.platform});store_1.dispatchThunk(thunk)},LocalEmulatorController.prototype.sendMessage=function(_a){var message=_a.message;if(!this.config)throw new Error("No config was set for emulator: "+this.emulatorContext);if(message===native_types_1.EmulatorActions.rotateLeft){var newRotation=rotationUtils_1.getPreviousRotation(this.rotationMode);this.updateRotation(newRotation)}else if(message===native_types_1.EmulatorActions.rotateRight){newRotation=rotationUtils_1.getNextRotation(this.rotationMode);this.updateRotation(newRotation)}else message===native_types_1.EmulatorActions.saveScreenshot&&this.saveScreenshot()},LocalEmulatorController.prototype.createEmulator=function(){},LocalEmulatorController.prototype.undebouncedOpenDeepLink=function(deepLinkUrl){var _a;if(deep_link_logger_1.logDeepLink(deepLinkUrl),!this.config)throw new Error("No config was set for emulator: "+this.emulatorContext);var thunk=commandsSlice_1.performCommand("/deepLink",{platform:null===(_a=this.config)||void 0===_a?void 0:_a.platform,url:deepLinkUrl});store_1.dispatchThunk(thunk)},LocalEmulatorController.prototype.getContext=function(){return this.emulatorContext},LocalEmulatorController.prototype.updateConfig=function(config){this.config=config},LocalEmulatorController}();exports.default=LocalEmulatorController},902:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),__webpack_require__(405),Object.defineProperty(exports,"__esModule",{value:!0}),exports.getNextRotation=exports.getPreviousRotation=void 0;var native_types_1=__webpack_require__(474);exports.getPreviousRotation=function(rotation){var index=native_types_1.RotationsList.findIndex((function(val){return val===rotation}));return 0===index?native_types_1.RotationsList[native_types_1.RotationsList.length-1]:native_types_1.RotationsList[index-1]},exports.getNextRotation=function(rotation){var newIndex=(native_types_1.RotationsList.findIndex((function(val){return val===rotation}))+1)%native_types_1.RotationsList.length;return native_types_1.RotationsList[newIndex]}},903:function(module,exports,__webpack_require__){"use strict";__webpack_require__(5),__webpack_require__(16),__webpack_require__(13);var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(0)),react_redux_1=__webpack_require__(300),native_controllers_1=__webpack_require__(299),components_1=__webpack_require__(45),CommandDetails_1=__importDefault(__webpack_require__(904));exports.default=react_redux_1.connect((function mapStateToProps(state){return __assign({},state)}))((function CommandsList(_a){var loading=_a.loading,commands=_a.commands,context=_a.context,dispatch=native_controllers_1.useAppDispatch();return react_1.default.useEffect((function(){native_controllers_1.resetCommands(dispatch)}),[context,dispatch]),react_1.default.createElement("div",null,commands.map((function(command){return react_1.default.createElement(CommandDetails_1.default,{command:command})})),loading&&react_1.default.createElement(components_1.Loader,null))}))},904:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16);var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(0)),SuccessMessage_1=__importDefault(__webpack_require__(905)),ErrorMessage_1=__importDefault(__webpack_require__(906));exports.default=function(_a){var command=_a.command,successful=command.successful,response=command.response,message=command.message,textToRender=response;return textToRender||(textToRender="Sent data to app: "+JSON.stringify(message,null,2)),successful?react_1.default.createElement(SuccessMessage_1.default,null,textToRender):react_1.default.createElement(ErrorMessage_1.default,null,textToRender)}},905:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16);var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(0)),BaseMessage_1=__importDefault(__webpack_require__(475));exports.default=function(_a){var children=_a.children;return react_1.default.createElement(BaseMessage_1.default,{backgroundColor:"green"},children)}},906:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16);var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(0)),BaseMessage_1=__importDefault(__webpack_require__(475));exports.default=function(_a){var children=_a.children;return react_1.default.createElement(BaseMessage_1.default,{backgroundColor:"red"},children)}},907:function(module,exports,__webpack_require__){"use strict";__webpack_require__(5),__webpack_require__(16);var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(t){for(var s,i=1,n=arguments.length;i<n;i++)for(var p in s=arguments[i])Object.prototype.hasOwnProperty.call(s,p)&&(t[p]=s[p]);return t}).apply(this,arguments)},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0});var react_1=__importDefault(__webpack_require__(0)),native_controllers_1=__webpack_require__(299),native_devices_1=__webpack_require__(203),addons_1=__webpack_require__(81);exports.default=function(props){var apiKey=props.apiKey,platform=props.platform,extraParams=props.extraParams,storyParams=props.storyParams,iframeRef=react_1.default.useRef(null),device=native_devices_1.useDevice(platform);react_1.default.useEffect((function(){var onAction=function onAction(action){var _a,_b;null===(_b=null===(_a=iframeRef.current)||void 0===_a?void 0:_a.contentWindow)||void 0===_b||_b.postMessage(action,"*")};return addons_1.addons.getChannel().on(native_controllers_1.ACTION_EVENT_NAME,onAction),function(){addons_1.addons.getChannel().off(native_controllers_1.ACTION_EVENT_NAME,onAction)}}),[]);var storyParamsWithExtras=__assign(__assign({},storyParams),extraParams),url=native_controllers_1.getAppetizeUrl({apiKey:apiKey,settings:{device:device},launchArgs:storyParamsWithExtras,platform:platform});return react_1.default.createElement("iframe",{title:"appetize-embed",src:url,ref:iframeRef,style:{border:"0",width:"100vw",height:"100vh"},scrolling:"no",id:"appetize-iframe"})}},908:function(module,exports,__webpack_require__){"use strict";__webpack_require__(16),Object.defineProperty(exports,"__esModule",{value:!0})},910:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__(5),__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(19);__webpack_exports__.default={title:"Card"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"card"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Cards"\nlayout: detail\nsection: components\nexcerpt: "Cards display content and actions on a single subject."\niconId: card\npath: /catalog/cards/\n--\x3e\n\n# Cards\n\n[Cards](https://material.io/components/cards/) contain content and actions about\na single subject.\n\n!["Cards with text, numbers, graph, and a chart"](assets/cards/cards_hero.png)\n\n**Contents**\n\n*   [Using cards](#using-cards)\n*   [Card](#card)\n*   [Theming](#theming-cards)\n\n## Using cards\n\nBefore you can use a Material card, you need to add a dependency to the Material\nComponents for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\nCards support [checking](#making-a-card-checkable) and\n[dragging](#making-a-card-draggable), but those behaviors are not implemented by\ndefault.\n\n### Making cards accessible\n\nThe contents within a card should follow their own accessibility guidelines,\nsuch as images having content descriptions set on them.\n\nIf you have a draggable card, you should set an\n[`AccessibilityDelegate`](https://developer.android.com/reference/android/view/View.AccessibilityDelegate)\non it, so that the behavior can be accessible via screen readers such as\nTalkBack. See the [draggable card section](#making-a-card-draggable) section\nbelow for more info.\n\n### Making a card checkable\n\n![Elevated card with a checked button and a light purple overlay; secondary\ntitle and Action 1 and Action 2 buttons](assets/cards/cards_checked.png)\n\nWhen a card is checked, it will show a checked icon and change its foreground\ncolor. There is no default behavior for enabling/disabling the checked state. An\nexample of how to do it in response to a long click is shown below.\n\nIn the layout:\n\n```xml\n<com.google.android.material.card.MaterialCardView\n    ...\n    android:clickable="true"\n    android:focusable="true"\n    android:checkable="true">\n\n    ...\n\n</com.google.android.material.card.MaterialCardView>\n```\n\nIn code:\n\n```kt\ncard.setOnLongClickListener {\n    card.setChecked(!card.isChecked)\n    true\n}\n```\n\n### Making a card draggable\n\n![Elevated card with a light grey overlay; secondary title and Action 1 and\nAction 2 buttons](assets/cards/cards_dragged.png)\n\nCards have an `app:state_dragged` that has foreground and elevation changes to\nconvey motion. We recommend using\n[`ViewDragHelper`](https://developer.android.com/reference/androidx/customview/widget/ViewDragHelper)\nto set the dragged state:\n\n```kt\nprivate inner class ViewDragHelperCallback : ViewDragHelper.Callback() {\n\n    override fun onViewCaptured(capturedChild: View, activePointerId: Int) {\n        if (capturedChild is MaterialCardView) {\n            (view as MaterialCardView).setDragged(true)\n        }\n    }\n\n    override fun onViewReleased(releaseChild: View, xVel: Float, yVel: Float) {\n        if (releaseChild is MaterialCardView) {\n            (view as MaterialCardView).setDragged(false)\n        }\n    }\n}\n```\n\nAlternatively, the\n[Material Catalog](https://github.com/material-components/material-components-android/tree/master/catalog/java/io/material/catalog/card)\nhas an implementation example that uses a custom class called\n[`DraggableCoordinatorLayout`](https://github.com/material-components/material-components-android/tree/master/catalog/java/io/material/catalog/draggable/DraggableCoordinatorLayout.java)\nthat you can copy, which is used as the parent container in the layout:\n\nIn the layout:\n\n```xml\n<io.material.catalog.draggable.DraggableCoordinatorLayout\n    android:id="@+id/parentContainer"\n    ...>\n\n    <com.google.android.material.card.MaterialCardView\n        ...>\n\n        ...\n\n    </com.google.android.material.card.MaterialCardView>\n\n</io.material.catalog.draggable.DraggableCoordinatorLayout>\n```\n\nIn code:\n\n```kt\nparentContainer.addDraggableChild(card)\n\nparentContainer.setViewDragListener(object : DraggableCoordinatorLayout.ViewDragListener {\n\n    override fun onViewCaptured(view: View, pointerId: Int) {\n        card.isDragged = true\n    }\n\n    override fun onViewReleased(view: View, vX: Float, vY: Float) {\n        card.isDragged = false\n    }\n})\n```\n\nFinally, make sure to make the behavior is accessible by setting an\n[`AccessibilityDelegate`](https://developer.android.com/reference/android/view/View.AccessibilityDelegate)\non the card. The following shows an example of allowing the user to move the\ncard to two different positions on the screen.\n\n```kt\nprivate val cardDelegate = object : AccessibilityDelegate() {\n    override fun onInitializeAccessibilityNodeInfo(host: View, info: AccessibilityNodeInfo) {\n        super.onInitializeAccessibilityNodeInfo(host, info)\n\n        val layoutParams = card!!.layoutParams as CoordinatorLayout.LayoutParams\n        val gravity = layoutParams.gravity\n        val isOnTop = gravity and Gravity.TOP == Gravity.TOP\n        val isOnBottom = gravity and Gravity.BOTTOM == Gravity.BOTTOM\n\n        if (!isOnTop) {\n            info.addAction(AccessibilityAction(R.id.move_card_top_action, getString(R.string.card_action_move_top)))\n        }\n        if (!isOnBottom) {\n            info.addAction(AccessibilityAction(R.id.move_card_bottom_action, getString(R.string.card_action_move_bottom)))\n        }\n    }\n\n    override fun performAccessibilityAction(host: View, action: Int, arguments: Bundle): Boolean {\n        val gravity: Int\n        if (action == R.id.move_card_top_action) {\n            gravity = Gravity.TOP\n        } else if (action == R.id.move_card_bottom_action) {\n            gravity = Gravity.BOTTOM\n        } else {\n            return super.performAccessibilityAction(host, action, arguments)\n        }\n\n        val layoutParams = card!!.layoutParams as CoordinatorLayout.LayoutParams\n        if (layoutParams.gravity != gravity) {\n            layoutParams.gravity = gravity\n            card!!.requestLayout()\n        }\n\n        return true\n    }\n}\n```\n\n_**Note:** Cards also support a swipe-to-dismiss behavior through the use of\n[\'SwipeDismissBehavior\'](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/behavior/SwipeDismissBehavior.java).\nYou can see an example\n[here](https://github.com/material-components/material-components-android/tree/master/catalog/java/io/material/catalog/card/CardSwipeDismissFragment.java)._\n\n## Card\n\nOn mobile, a [card’s](https://material.io/components/cards/#specs) default\nelevation is `1dp`, with a raised dragged elevation of `8dp`.\n\n![Elevated card with a secondary title and Action 1 and Action 2 buttons in\npurple](assets/cards/cards_basic.png)\n\n### Card examples\n\nAPI and source code:\n\n*   `MaterialCardView`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/card/MaterialCardView)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/MaterialCardView.java)\n\n_**Note:** You don\'t need to specify a style tag as long as you are using a\nMaterial Components Theme. If not, set the style to\n`Widget.MaterialComponents.CardView`._\n\n#### Elevated card\n\nThe following example shows an elevated card.\n\n!["Elevated card with photo, a title, a secondary title, text, and Action 1 and\nAction 2 buttons in purple"](assets/cards/cards_elevated.png)\n\n```xml\n<com.google.android.material.card.MaterialCardView\n    android:id="@+id/card"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:layout_margin="8dp">\n\n    <LinearLayout\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:orientation="vertical">\n\n        \x3c!-- Media --\x3e\n        <ImageView\n            android:layout_width="match_parent"\n            android:layout_height="194dp"\n            app:srcCompat="@drawable/media"\n            android:scaleType="centerCrop"\n            android:contentDescription="@string/content_description_media"\n            />\n\n        <LinearLayout\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:orientation="vertical"\n            android:padding="16dp">\n\n            \x3c!-- Title, secondary and supporting text --\x3e\n            <TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:text="@string/title"\n                android:textAppearance="?attr/textAppearanceHeadline6"\n                />\n            <TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_marginTop="8dp"\n                android:text="@string/secondary_text"\n                android:textAppearance="?attr/textAppearanceBody2"\n                android:textColor="?android:attr/textColorSecondary"\n                />\n            <TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_marginTop="16dp"\n                android:text="@string/supporting_text"\n                android:textAppearance="?attr/textAppearanceBody2"\n                android:textColor="?android:attr/textColorSecondary"\n                />\n\n        </LinearLayout>\n\n        \x3c!-- Buttons --\x3e\n        <LinearLayout\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_margin="8dp"\n            android:orientation="horizontal">\n            <com.google.android.material.button.MaterialButton\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_marginEnd="8dp"\n                android:text="@string/action_1"\n                style="?attr/borderlessButtonStyle"\n                />\n            <com.google.android.material.button.MaterialButton\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:text="@string/action_2"\n                style="?attr/borderlessButtonStyle"\n                />\n        </LinearLayout>\n\n    </LinearLayout>\n\n</com.google.android.material.card.MaterialCardView>\n```\n\n#### Outlined card\n\nThe following example shows an outlined card.\n\n!["Outlined card with a photo, title, a secondary title, text, and Action 1 and\nAction 2 buttons in purple"](assets/cards/cards_outlined.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.card.MaterialCardView\n    ...\n    app:strokeWidth="1dp"\n    app:strokeColor="@color/stroke_color"\n    app:cardElevation="0dp">\n\n    ...\n\n</com.google.android.material.card.MaterialCardView>\n```\n\nIn the stroke color (`stroke_color.xml`):\n\n```xml\n<selector xmlns:android="http://schemas.android.com/apk/res/android">\n    <item android:color="?attr/colorPrimary" android:state_checked="true"/>\n    <item android:alpha="0.12" android:color="?attr/colorOnSurface" android:state_checked="false"/>\n</selector>\n```\n\n### Anatomy and key properties\n\nA card has a container and an optional thumbnail, header text, secondary text,\nmedia, supporting text, buttons and icons.\n\n![card anatomy diagram](assets/cards/card-anatomy.png)\n\n1.  Container\n2.  Thumbnail\n3.  Header text\n4.  Secondary text\n5.  Media\n6.  Supporting text\n7.  Buttons\n8.  Icons\n9.  Checked icon (not shown)\n\n_**Note:** All the optional elements of a card\'s content (with the exception of\nthe checked icon) are implemented through the use of other views/components, as\nshown in the [card examples](#card-examples) section._\n\n#### Container attributes\n\nElement              | Attribute                 | Related method(s)                                                   | Default value\n-------------------- | ------------------------- | ------------------------------------------------------------------- | -------------\n**Color**            | `app:cardBackgroundColor` | `setCardBackgroundColor`<br/>`getCardBackgroundColor`               | `?attr/colorSurface`\n**Foreground color** | `app:cardForegroundColor` | `setCardForegroundColor`<br/>`getCardForegroundColor`               | `@android:color/transparent` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/res/color/mtrl_card_view_foreground.xml))\n**Stroke color**     | `app:strokeColor`         | `setStrokeColor`<br/>`getStrokeColor`<br/>`getStrokeColorStateList` | `null`\n**Stroke width**     | `app:strokeWidth`         | `setStrokeWidth`<br/>`getStrokeWidth`                               | `0dp`\n**Shape**            | `app:shapeAppearance`     | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`             | `?attr/shapeAppearanceMediumComponent`\n**Elevation**        | `app:cardElevation`       | `setCardElevation`<br/>`setCardMaxElevation`                        | `1dp`\n**Ripple color**     | `app:rippleColor`         | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`  | `?attr/colorOnSurface` at 20% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/res/color/mtrl_card_view_ripple.xml))\n\n_**Note:** We recommend that cards on mobile have `8dp` margins.\n`android:layout_margin` will [**NOT**](https://stackoverflow.com/a/13365288)\nwork in default styles (eg. `materialCardViewStyle`) so either set this attr\ndirectly on a `MaterialCardView` in the layout or add it to a style that is\napplied in the layout with `style="@style/...`._\n\n_**Note:** Without an `app:strokeColor`, the card will not render a stroked\nborder, regardless of the `app:strokeWidth` value._\n\n#### Checked icon attributes\n\nElement       | Attribute           | Related method(s)                                                                    | Default value\n------------- | ------------------- | ------------------------------------------------------------------------------------ | -------------\n**Icon**      | `checkedIcon`       | `setCheckedIcon`<br/>`setCheckedIconResource`<br/>`getCheckedIcon`                   | [`@drawable/ic_mtrl_checked_circle.xml`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/resources/res/drawable/ic_mtrl_checked_circle.xml)\n**Color**     | `checkedIconTint`   | `setCheckedIconTint`<br/>`getCheckedIconTint`                                        | `?attr/colorPrimary`\n**Checkable** | `android:checkable` | `setCheckable`<br/>`isCheckable`                                                     | `false`\n**Size**      | `checkedIconSize`   | `setCheckedIconSize`<br/>`setCheckedIconSizeResource`<br/>`getCheckedIconSize`       | `24dp`\n**Margin**    | `checkedIconMargin` | `setCheckedIconMargin`<br/>`setCheckedIconMarginResource`<br/>`getCheckedIconMargin` | `8dp`\n\n#### States\n\nCards can have the following states:\n\nState                                 | Description                         | Related method(s)\n------------------------------------- | ----------------------------------- | -----------------\n**Default**                           | Card is not checked and not dragged | N/A\n**Checked** (`android:state_checked`) | `true` if a card is checked         | `setChecked`<br/>`setOnCheckedChangeListener`<br/>`isChecked`\n**Dragged** (`app:state_dragged`)     | `true` when a card is being dragged | `setDragged`<br/>`isDragged`\n\n#### Styles\n\nElement           | Style\n----------------- | ------------------------------------\n**Default style** | `Widget.MaterialComponents.CardView`\n\nDefault style theme attribute: `?attr/materialCardViewStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/res/values/styles.xml)\nand\n[attributes](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/res/values/attrs.xml).\n\n## Theming cards\n\nA card supports\n[Material Theming](https://material.io/components/cards/#theming) and can be\ncustomized in terms of color, typography and shape.\n\n### Card theming example\n\nAPI and source code\n\n*   `MaterialCardView`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/card/MaterialCardView)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/MaterialCardView.java)\n\nThe following example shows a card with Material Theming.\n\n![Card with Shrine theme with photo, title, secondary title, text and Action 1\nand 2 buttons in black](assets/cards/cards_theming.png)\n\n#### Implementing card theming\n\nUsing theme attributes and a style in `res/values/styles.xml` (themes all cards\nand affects other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorSurface">@color/shrine_pink_light</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="shapeAppearanceMediumComponent">@style/ShapeAppearance.App.MediumComponent</item>\n</style>\n\n<style name="ShapeAppearance.App.MediumComponent" parent="ShapeAppearance.MaterialComponents.MediumComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">8dp</item>\n</style>\n```\n\nor using a default style theme attribute, styles and a theme overlay (themes all\ncards but does not affect other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="materialCardViewStyle">@style/Widget.App.CardView</item>\n</style>\n\n<style name="Widget.App.CardView" parent="Widget.MaterialComponents.CardView">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Card</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.MediumComponent</item>\n</style>\n\n<style name="ThemeOverlay.App.Card" parent="">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorSurface">@color/shrine_pink_light</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n</style>\n```\n\nor using the style in the layout (affects only this specific card):\n\n```xml\n<com.google.android.material.card.MaterialCardView\n    ...\n    style="@style/Widget.App.CardView"\n/>\n```\n\nIn order to optimize shape theming, some (optional) adjustments need to be made\nto the card layout to incorporate\n[ShapeableImageView](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/imageview/ShapeableImageView.java).\n\nIn the layout:\n\n```xml\n<com.google.android.material.card.MaterialCardView\n    ...\n    app:cardPreventCornerOverlap="false">\n\n    ...\n\n        \x3c!-- Media --\x3e\n        <com.google.android.material.imageview.ShapeableImageView\n            ...\n            app:shapeAppearance="?attr/shapeAppearanceMediumComponent"\n            app:shapeAppearanceOverlay="@style/ShapeAppearanceOverlay.App.Card.Media"\n            />\n\n</com.google.android.material.card.MaterialCardView>\n```\n\nIn `res/values/styles.xml`:\n\n```xml\n<style name="ShapeAppearanceOverlay.App.Card.Media" parent="">\n    <item name="cornerSizeBottomLeft">0dp</item>\n    <item name="cornerSizeBottomRight">0dp</item>\n</style>\n```\n\n_**Note:** In order to theme card contents (text, buttons, etc.), the relevant\nstyles/attributes for these components will need to be included. For more\ninformation, see the article on\n[buttons](https://material.io/develop/android/components/buttons/)._\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        apiKey="zv034bdme9je7c9d43chzmc2yg"\n        platform="android"\n        storyParams={{"component":"card"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/card.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories/card.stories.jsx"})},911:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__(5),__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(19);__webpack_exports__.default={title:"Chips"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"chips"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Material chips"\nlayout: detail\nsection: components\nexcerpt: "Chips are compact elements that represent an input, attribute, or action."\niconId: chip\npath: /catalog/chips/\n--\x3e\n\n# Chips\n\n[Chips](https://material.io/components/chips) are compact elements that\nrepresent an input, attribute, or action.\n\n![Email with purple "Compose" header and grey chip with an email address on the\n"To" line](assets/chips/chips_hero.png)\n\n**Contents**\n\n*   [Using chips](#using-chips)\n*   [Input chip](#input-chip)\n*   [Choice chip](#choice-chip)\n*   [Filter chip](#filter-chip)\n*   [Action chip](#action-chip)\n*   [Theming chips](#theming-chips)\n\n## Using chips\n\nBefore you can use Material chips, you need to add a dependency to the Material\nComponents for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\nChips allow users to enter information, make selections, filter content, or\ntrigger actions. While buttons are expected to appear consistently and with\nfamiliar calls to action, chips should appear dynamically as a group of multiple\ninteractive elements.\n\n### Usage\n\nA `Chip` can be added in a layout like so:\n\n```xml\n<com.google.android.material.chip.Chip\n    android:id="@+id/chip"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="@string/text"/>\n```\n\nChanges to a chip can be observed like so:\n\n```kt\nchip.setOnClickListener {\n   // Responds to chip click\n}\n\nchip.setOnCloseIconClickListener {\n    // Responds to chip\'s close icon click if one is present\n}\n\nchip.setOnCheckedChangeListener { chip, isChecked ->\n    // Responds to chip checked/unchecked\n}\n```\n\n### Making chips accessible\n\nChips support content labeling for accessibility and are readable by most screen\nreaders, such as TalkBack. Text rendered in chips is automatically provided to\naccessibility services. Additional content labels are usually unnecessary.\n\n#### Touch target\n\nThe `Widget.MaterialComponents.Chip.*` styles use an\n[InsetDrawable](https://developer.android.com/reference/android/graphics/drawable/InsetDrawable)\nto extend the chip\'s touch target when necessary to meet Android\'s recommended\n[accessibility touch target size](https://support.google.com/accessibility/android/answer/7101858).\nDevelopers can override a chip\'s minimum touch target size using\n`app:chipMinTouchTargetSize`. Developers can set whether the chip should extend\nits bounds to meet the minimum touch target using `app:ensureMinTouchTargetSize`\n(true by default).\n\n#### RTL-friendly chip layout\n\nCall `setLayoutDirection(int)` with `View.LAYOUT_DIRECTION_LOCALE` to ensure\nthat the chip\'s ancestor `TextView` renders the text with proper paddings.\nWithout this, the initial rendering may look like the text has its padding set\naccording to LTR direction.\n\n```kt\nchip.layoutDirection = View.LAYOUT_DIRECTION_LOCALE\n```\n\n### Grouping chips with `ChipGroup`\n\nChips are mostly commonly used in groups. We recommend using `ChipGroup` as it\nis purpose-built to handle multi-chip layout and behavior patterns (as opposed\nto a `ViewGroup` such as `RecyclerView`). A `ChipGroup` contains a set of\n`Chip`s and manages their layout and multiple-exclusion scope, similarly to a\n`RadioGroup`.\n\n#### Layout Mode\n\nA `ChipGroup` rearranges chips across multiple rows by default.\n\n!["6 grey "Filter" chips spread across 2 lines: "Filters" 1 and 3 selected and\nare darker grey and include checkmarks."](assets/chips/chips_filter.png)\n\n```xml\n<com.google.android.material.chip.ChipGroup\n    android:id="@+id/chipGroup"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content">\n\n  \x3c!-- Chips can be declared here, or added dynamically. --\x3e\n\n</com.google.android.material.chip.ChipGroup>\n```\n\nA `ChipGroup` can also constrain its chips to a single row using the\n`app:singleLine` attribute. Using a single row may necessitate wrapping the\n`ChipGroup` with a `HorizontalScrollView`.\n\n!["Single line of grey chips: chips 1, 2, and 3 are fully visible, chip 4 is\npartly visible"](assets/chips/chips_singleline.png)\n\n```xml\n<HorizontalScrollView\n    ... >\n  <com.google.android.material.chip.ChipGroup\n      ...\n      app:singleLine="true">\n\n    \x3c!-- Chips can be declared here, or added dynamically. --\x3e\n\n  </com.google.android.material.chip.ChipGroup>\n</HorizontalScrollView>\n```\n\n#### Chip spacing\n\nA `ChipGroup` can insert spacing between chips in a row or between rows of chips\nusing the `app:chipSpacing` attribute. Different horizontal and vertical spacing\ncan be set using the `app:chipSpacingHorizontal` and `app:chipSpacingVertical`\nattributes.\n\n_**Note:** The `app:chipMinTouchTargetSize` will overrule vertical chip spacing\nfor lower amounts._\n\nThe following image shows a group of chips with\n`app:chipSpacingHorizontal="42dp"`.\n\n!["6 grey chips in 2 rows with 42dp horizontal spacing"](assets/chips/chips_spacing.png)\n\n#### Multiple exclusion scope\n\nThe `app:singleSelection` attribute can be set to true on a `ChipGroup` in order\nto toggle single-select and multi-select behavior of child chips.\n\nThe `app:selectionRequired` attribute can be set to true on a `ChipGroup` to\nprevent all child chips from being deselected (i.e. at least one option should\nbe chosen).\n\n#### Handling checked chips\n\nChanges to child chip checked/unchecked state can be observed like so:\n\n```kt\nval checkedChipId = chipGroup.checkedChipId // Returns View.NO_ID if singleSelection = false\nval checkedChipIds = chipGroup.checkedChipIds // Returns a list of the selected chips\' IDs, if any\n\nchipGroup.setOnCheckedChangeListener { group, checkedId ->\n    // Responds to child chip checked/unchecked\n}\n```\n\n### Standalone `ChipDrawable`\n\nA standalone `ChipDrawable` can be used in contexts that require a `Drawable`.\nThe most obvious use case is in text fields that "chipify" contacts, commonly\nfound in communications apps.\n\nTo use a `ChipDrawable`, first create a chip resource in `res/xml`. Note that\nyou must use the `<chip` tag in your resource file.\n\nIn `res/xml/standalone_chip.xml`:\n\n```xml\n<chip\n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    app:chipIcon="@drawable/ic_chip"\n    android:text="@string/text"/>\n```\n\nEntry Chip is the default Material style for standalone `ChipDrawable`s, but you\ncan apply any of the other styles using the `style` attribute. All the\nattributes on `Chip` can be applied to a `ChipDrawable` resource.\n\nA ChipDrawable can then be inflated from this resource like so:\n\n```xml\nval chipDrawable = ChipDrawable.createFromResource(context, R.xml.chip)\n```\n\nFor example, consider an editable e-mail address field that converts addresses\nto chips as they are typed and validated. We can combine `ChipDrawable` with\nspans to add a chip to an `EditText`:\n\n!["Standalone chip inside a text field"](assets/chips/chips_standalone.png)\n\n```kt\nchip.setBounds(0, 0, chip.intrinsicWidth, chip.intrinsicHeight)\nval span = ImageSpan(chip)\nval text = editText.text!!\ntext.setSpan(span, 0, text.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n```\n\n### Types\n\nThere are four types of chips: 1. [input (entry)](#input-chip), 2.\n[choice](#choice-chip), 3. [filter](#filter-chip), 4. [action](#action-chip)\n\n![Examples of the four different chip types](assets/chips/chips_composite.png)\n\nAPI and source code:\n\n*   `Chip`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/Chip)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/Chip.java)\n*   `ChipGroup`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/ChipGroup)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/ChipGroup.java)\n*   `ChipDrawable`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/ChipDrawable)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/ChipDrawable.java)\n\n## Input chip\n\nInput chips (refered to as **entry** chips in Android) represent a complex piece\nof information in compact form, such as an entity (person, place, or thing) or\ntext. They enable user input and verify that input by converting text into\nchips.\n\n### Input chip example\n\nThe following example shows three input chips.\n\n!["Input chips with texts Input 1 to 3."](assets/chips/chips_input.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.chip.ChipGroup\n    ...>\n  <com.google.android.material.chip.Chip\n      android:id="@+id/chip_1"\n      style="@style/Widget.MaterialComponents.Chip.Entry"\n      android:layout_width="wrap_content"\n      android:layout_height="wrap_content"\n      android:text="@string/text_input_1"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.MaterialComponents.Chip.Entry"\n      android:text="@string/text_input_2"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.MaterialComponents.Chip.Entry"\n      android:text="@string/text_input_3"/>\n\n</com.google.android.material.chip.ChipGroup>\n```\n\n## Choice chip\n\nChoice chips allow selection of a single chip from a set of options.\n\nChoice chips clearly delineate and display options in a compact area. They are a\ngood alternative to toggle buttons, radio buttons, and single select menus.\n\n### Caveats\n\nIf you add choice chips to a dialog (which has 24dp elevation), disable the\nchips\' elevation overlays to ensure that there is sufficient color contrast when\nthe chips are checked.\n\n```xml\n<style name="Widget.MyApp.Chip.Choice" parent="Widget.MaterialComponents.Chip.Choice">\n  ...\n    <item name="materialThemeOverlay">@style/ThemeOverlay.MyApp.Chip.Choice</item>\n</style>\n\n\x3c!-- Disabling elevation overlays because when chip\'s default background/surface\n     composite are combined with elevation overlays in a highly elevated dialog,\n     the resulting color becomes too light and causes contrast\n     issues. --\x3e\n<style name="ThemeOverlay.MyApp.Chip.Choice" parent="">\n    <item name="elevationOverlayEnabled">false</item>\n</style>\n```\n\n### Choice chip example\n\nThe following example shows four choice chips.\n\n!["4 choice chips, Choice 1 is selected with purple fill, Choices 2-4 unselected\nwith grey fill"](assets/chips/chips_choice.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.chip.ChipGroup\n    ...>\n  <com.google.android.material.chip.Chip\n      android:id="@+id/chip_1"\n      style="@style/Widget.MaterialComponents.Chip.Choice"\n      android:layout_width="wrap_content"\n      android:layout_height="wrap_content"\n      android:checked="true"\n      android:text="@string/text_choice_1"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.MaterialComponents.Chip.Choice"\n      android:text="@string/text_choice_2"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.MaterialComponents.Chip.Choice"\n      android:text="@string/text_choice_3"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.MaterialComponents.Chip.Choice"\n      android:text="@string/text_choice_4"/>\n\n</com.google.android.material.chip.ChipGroup>\n```\n\n## Filter chip\n\nFilter chips use tags or descriptive words to filter content.\n\nFilter chips clearly delineate and display options in a compact area. They are a\ngood alternative to toggle buttons or checkboxes.\n\n### Filter chip example\n\nThe following example shows six filter chips.\n\n!["6 grey "Filter" chips spread across 2 lines: "Filters" 1 and 3 selected and\nare darker grey and include checkmarks."](assets/chips/chips_filter.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.chip.ChipGroup\n    ...>\n  <com.google.android.material.chip.Chip\n      android:id="@+id/chip_1"\n      style="@style/Widget.MaterialComponents.Chip.Choice"\n      android:layout_width="wrap_content"\n      android:layout_height="wrap_content"\n      android:checked="true"\n      android:text="@string/text_filter_1"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.MaterialComponents.Chip.Choice"\n       android:text="@string/text_filter_2"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.MaterialComponents.Chip.Choice"\n      android:checked="true"\n      android:text="@string/text_filter_3"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.MaterialComponents.Chip.Choice"\n      android:text="@string/text_filter_4"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.MaterialComponents.Chip.Choice"\n      android:text="@string/text_filter_5"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.MaterialComponents.Chip.Choice"\n      android:text="@string/text_filter_6"/>\n\n</com.google.android.material.chip.ChipGroup>\n```\n\n## Action chip\n\nAction chips offer actions related to primary content. They should appear\ndynamically and contextually in a UI.\n\nAn alternative to action chips are buttons, which should appear persistently and\nconsistently.\n\n### Action chip example\n\nThe following example shows four action chips.\n\n!["Actions chips with texts Action 1 to 4 and icons."](assets/chips/chips_action.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.chip.ChipGroup\n    ...>\n  <com.google.android.material.chip.Chip\n      android:id="@+id/chip_1"\n      android:layout_width="wrap_content"\n      android:layout_height="wrap_content"\n      app:chipIconTint="@color/icon_tint"\n      app:chipIcon="@drawable/favorite"\n      android:text="@string/text_action_1"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      app:chipIconTint="@color/icon_tint"\n      app:chipIcon="@drawable/delete"\n      android:text="@string/text_action_2"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      app:chipIconTint="@color/icon_tint"\n      app:chipIcon="@drawable/alarm"\n      android:text="@string/text_action_3"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      app:chipIconTint="@color/icon_tint"\n      app:chipIcon="@drawable/location"\n      android:text="@string/text_action_4"/>\n\n</com.google.android.material.chip.ChipGroup>\n```\n\n### Anatomy and key properties\n\nThe following is an anatomy diagram of a chip:\n\n![Chip anatomy diagram](assets/chips/chips_anatomy.png)\n\n1.  Container\n1.  Thumbnail (optional)\n1.  Text\n1.  Remove icon (optional)\n\n#### Container attributes\n\nElement              | Attribute                                                       | Related method(s)                                                                                          | Default value\n-------------------- | --------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- | -------------\n**Color**            | `app:chipBackgroundColor`                                       | `setChipBackgroundColor`<br/>`setChipBackgroundColorResource`<br/>`getChipBackgroundColor`                 | `?attr/colorOnSurface` at 10%\n**Ripple color**     | `app:rippleColor`                                               | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`                                         | `?attr/colorOnSurface` at 12%\n**Stroke width**     | `app:chipStrokeWidth`                                           | `setStrokeWidth`<br/>`setChipStrokeWidthResource`<br/>`getChipStrokeWidth`                                 | `0dp`\n**Stroke color**     | `app:chipStrokeColor`                                           | `setStrokeColor`<br/>`setChipStrokeColorResource`<br/>`getChipStrokeColor`                                 | `?attr/colorOnSurface`\n**Min height**       | `app:chipMinHeight`                                             | `setChipMinHeight`<br/>`setChipMinHeightResource`<br/>`getChipMinHeight`                                   | `32dp`\n**Padding**          | `app:chipStartPadding`<br/>`app:chipEndPadding`                 | `setChip*Padding`<br/>`setChip*PaddingResource`<br/>`getChip*Padding`                                      | `4dp` (start)<br/>`6dp` (end)\n**Shape**            | `app:shapeAppearance`<br/>`shapeAppearanceOverlay`              | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                                                    | `?attr/shapeAppearanceSmallComponent` with 50% `cornerSize`\n**Min touch target** | `app:chipMinTouchTargetSize`<br/>`app:ensureMinTouchTargetSize` | `ensureAccessibleTouchTarget`<br/>`setEnsureAccessibleTouchTarget`<br/>`shouldEnsureAccessibleTouchTarget` | `48dp`<br/>`true`\n**Checkable**        | `android:checkable`                                             | `setCheckable`<br/>`setCheckableResource`<br/>`isCheckable`                                                | `true` (entry, filter, choice)\n\n#### Thumbnail attributes\n\n**Chip icon**\n\nElement        | Attribute                                       | Related method(s)                                                     | Default value\n-------------- | ----------------------------------------------- | --------------------------------------------------------------------- | -------------\n**Icon**       | `app:chipIcon`                                  | `setChipIconVisible`<br/>`isChipIconVisible`                          | `null`\n**Visibility** | `app:chipIconVisible`                           | `setChipIcon`<br/>`setChipIconResource`<br/>`getChipIcon`             | `true` (action and entry)\n**Color**      | `app:chipIconTint`                              | `setChipIconTint`<br/>`setChipIconTintResource`<br/>`getChipIconTint` | `null`\n**Size**       | `app:chipIconSize`                              | `setChipIconSize`<br/>`setChipIconSizeResource`<br/>`getChipIconSize` | `24dp`\n**Padding**    | `app:iconStartPadding`<br/>`app:iconEndPadding` | `setIcon*Padding`<br/>`setIcon*PaddingResource`<br/>`getIcon*Padding` | `0dp`\n\n**Checked icon**\n\nIf visible, the checked icon overlays the chip icon.\n\nElement        | Attribute                | Related method(s)                                                              | Default value\n-------------- | ------------------------ | ------------------------------------------------------------------------------ | -------------\n**Icon**       | `app:checkedIcon`        | `setCheckedIconVisible`<br/>`isCheckedIconVisible`                             | `@drawable/ic_mtrl_chip_checked_circle`\n**Visibility** | `app:checkedIconVisible` | `setCheckedIcon`<br/>`setCheckedIconResource`<br/>`getCheckedIcon`             | `true` (entry, filter, choice)\n**Color**      | `app:checkedIconTint`    | `setCheckedIconTint`<br/>`setCheckedIconTintResource`<br/>`getCheckedIconTint` | `null`\n\n#### Text attributes\n\nElement        | Attribute                                       | Related method(s)                                                           | Default value\n-------------- | ----------------------------------------------- | --------------------------------------------------------------------------- | -------------\n**Text label** | `android:text`                                  | `setChipText`<br/>`setChipTextResource`<br/>`getChipText`                   | `null`\n**Color**      | `android:textColor`                             | `setTextColor`<br/>`getTextColors`                                          | `?attr/colorOnSurface` at 87%\n**Typography** | `android:textAppearance`                        | `setTextAppearance`<br/>`setTextAppearanceResource`<br/>`getTextAppearance` | `?attr/textAppearanceBody2`\n**Padding**    | `app:textStartPadding`<br/>`app:textEndPadding` | `setText*Padding`<br/>`setText*PaddingResource`<br/>`getText*Padding`       | `8dp` (start)<br/>`6dp` (end)\n\n#### Remove (close) icon attributes\n\nElement                 | Attribute                                                 | Related method(s)                                                                    | Default value\n----------------------- | --------------------------------------------------------- | ------------------------------------------------------------------------------------ | -------------\n**Icon**                | `app:closeIcon`                                           | `setCloseIcon`<br/>`setCloseIconResource`<br/>`getCloseIcon`                         | `@drawable/ic_mtrl_chip_close_circle`\n**Visibility**          | `app:closeIconVisible`                                    | `setCloseIconVisible`<br/>`isCloseIconVisible`                                       | `true` for entry\n**Color**               | `app:closeIconTint`                                       | `setCloseIconTint`<br/>`setCloseIconTintResource`<br/>`getCloseIconTint`             | `?attr/colorOnSurface` at 87%\n**Size**                | `app:closeIconSize`                                       | `setCloseIconSize`<br/>`setCloseIconSizeResource`<br/>`getCloseIconSize`             | `18dp`\n**Padding**             | `app:closeIconStartPadding`<br/>`app:closeIconEndPadding` | `setCloseIcon*Padding`<br/>`setCloseIcon*PaddingResource`<br/>`getCloseIcon*Padding` | `2dp`\n**Content description** | N/A                                                       | `setCloseIconContentDescription`<br/>`getCloseIconContentDescription`                | `@string/mtrl_chip_close_icon_content_description`\n\n#### `ChipGroup` attributes\n\nElement       | Attribute                                                                   | Related method(s)                                             | Default value\n------------- | --------------------------------------------------------------------------- | ------------------------------------------------------------- | -------------\n**Layout**    | `app:singleLine`                                                            | `setSingleLine`<br/>`isSingleLine`                            | `false`\n**Selection** | `app:singleSelection`<br/>`app:selectionRequired`                           | `setSingleSelection*`<br/>`isSingleSelection*`                | `false`<br/>`false`\n**Spacing**   | `app:chipSpacing`<br/>`app:chipSpacingHorizontal`<br/>`chipSpacingVertical` | `setSpacing*`<br/>`setChipSpacing*Resource`<br/>`getSpacing*` | `8dp`\n\n#### Styles\n\nElement                         | Style\n------------------------------- | ---------------------------------------\n**Default style (action chip)** | `Widget.MaterialComponents.Chip.Action`\n**Input (entry) chip**          | `Widget.MaterialComponents.Chip.Entry`\n**Choice chip**                 | `Widget.MaterialComponents.Chip.Choice`\n**Filter chip**                 | `Widget.MaterialComponents.Chip.Filter`\n**`ChipGroup` style**           | `Widget.MaterialComponents.ChipGroup`\n\n#### Theme attributes\n\nElement            | Theme attribute             | Default style\n------------------ | --------------------------- | -------------\n**`Chip`**         | `?attr/chipStyle`           | `Widget.MaterialComponents.Chip.Action`\n**`ChipGroup`**    | `?attr/chipGroupStyle`      | `Widget.MaterialComponents.ChipGroup`\n**`ChipDrawable`** | `?attr/chipStandaloneStyle` | `Widget.MaterialComponents.Chip.Entry`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/res/values/styles.xml)\nand\n[attributes](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/res/values/attrs.xml).\n\n## Theming chips\n\nChips support [Material Theming](https://material.io/components/chips/#theming)\nand can be customized in terms of color, typography and shape.\n\n### Chip theming example\n\nAPI and source code:\n\n*   `Chip`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/Chip)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/Chip.java)\n*   `ChipGroup`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/ChipGroup)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/ChipGroup.java)\n*   `ChipDrawable`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/ChipDrawable)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/ChipDrawable.java)\n\nThe following example shows chips with Material Theming.\n\n!["3 chips with brown text and icons, white fill, and pink outlines"](assets/chips/chips_theming.png)\n\n#### Implementing chip theming\n\nUsing theme attributes and styles in `res/values/styles.xml` (themes all chips\nand affects other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="colorOnSurface">@color/shrine_pink_100</item>\n    <item name="textAppearanceBody2">@style/TextAppearance.App.Body2</item>\n    <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.App.SmallComponent</item>\n    <item name="chipStyle">@style/Widget.App.Chip</item>\n</style>\n\n<style name="Widget.App.Chip" parent="Widget.MaterialComponents.Chip.Entry">\n    <item name="chipIconTint">@color/shrine_pink_900</item>\n    <item name="chipBackgroundColor">@color/white</item>\n    <item name="chipStrokeWidth">2dp</item>\n    <item name="chipStrokeColor">@color/stroke_tint</item>\n    <item name="checkedIconVisible">false</item>\n    <item name="shapeAppearanceOverlay">@null</item>\n</style>\n\n<style name="TextAppearance.App.Body2" parent="TextAppearance.MaterialComponents.Body2">\n    <item name="fontFamily">@font/rubik_regular</item>\n    <item name="android:fontFamily">@font/rubik_regular</item>\n</style>\n\n<style name="ShapeAppearance.App.SmallComponent" parent="ShapeAppearance.MaterialComponents.SmallComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">4dp</item>\n</style>\n```\n\nin `color/stroke_tint.xml`:\n\n```xml\n<selector xmlns:android="http://schemas.android.com/apk/res/android">\n  <item android:color="?attr/colorOnSurface" android:state_checked="true"/>\n  <item android:color="@color/shrine_pink_100"/>\n</selector>\n```\n\nor using a default style theme attribute, styles and a theme overlay (themes all\nchips but does not affect other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="chipStyle">@style/Widget.App.Chip</item>\n</style>\n\n<style name="Widget.App.Chip" parent="Widget.MaterialComponents.Chip.Entry">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Chip</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Body2</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n    ...\n</style>\n\n<style name="ThemeOverlay.App.Chip" parent="">\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n</style>\n```\n\nor using the style in the layout (affects only this specific chips):\n\n```xml\n<com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.App.Chip."  />\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        apiKey="zv034bdme9je7c9d43chzmc2yg"\n        platform="android"\n        storyParams={{"component":"chips"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/chips.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories/chips.stories.jsx"})},912:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__(5),__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(19);__webpack_exports__.default={title:"Dialogs"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"dialogs"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Dialogs"\nlayout: detail\nsection: components\nexcerpt: "Dialogs are modal windows that require interaction."\niconId: dialog\npath: /catalog/dialogs/\n--\x3e\n\n# Dialogs\n\n[Dialogs](https://material.io/components/dialogs/) inform users about a task and\ncan contain critical information, require decisions, or involve multiple tasks.\n\n!["Dialog to confirm settings centered in a screen"](assets/dialogs/dialogs_hero.png)\n\n**Contents**\n\n*   [Using dialogs](#using-dialogs)\n*   [Alert dialog](#alert-dialog)\n*   [Simple dialog](#simple-dialog)\n*   [Confirmation dialog](#confirmation-dialog)\n*   [Full-screen dialog](#full-screen-dialog)\n*   [Theming](#theming-dialogs)\n\n## Using dialogs\n\nBefore you can use Material dialogs, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n```kt\nMaterialAlertDialogBuilder(context)\n    // Add customization options here\n    .show()\n```\n\n### Making dialogs accessible\n\nThe contents within a dialog should follow their own accessibility guidelines,\nsuch as an icon on a title having a content description via the\n`android:contentDescription` attribute set in the\n`MaterialAlertDialog.MaterialComponents.Title.Icon` style or descendant.\n\n### Adding full width buttons\n\nThe buttons in a dialog can be made to span the full width of the dialog by\nusing the theme overrides\n`R.style.ThemeOverlay_MaterialComponents_MaterialAlertDialog_FullWidthButtons`\nor\n`R.style.ThemeOverlay_MaterialComponents_MaterialAlertDialog_Centered_FullWidthButtons`.\n\nThe following example shows an alert dialog with a long message and two full\nwidth buttons.\n\n!["Dialog with decline and accept buttons that span the full width"](assets/dialogs/dialogs_alert_with_fullwidth_buttons.png)\n\nIn code:\n\n```kt\nMaterialAlertDialogBuilder(context,\n  R.style.ThemeOverlay_MaterialComponents_MaterialAlertDialog_FullWidthButtons)\n        .setMessage(resources.getString(R.string.long_message))\n        .setNegativeButton(resources.getString(R.string.decline)) { dialog, which ->\n            // Respond to negative button press\n        }\n        .setPositiveButton(resources.getString(R.string.accept)) { dialog, which ->\n            // Respond to positive button press\n        }\n        .show()\n```\n\n### Types\n\nThere are four types of dialogs: 1. [Alert dialog](#alert-dialog), 2.\n[Simple dialog](#simple-dialog), 3.\n[Confirmation dialog](#confirmation-dialog), 4.\n[Full-screen dialog](#full-screen-dialog)\n\n![Examples of the four types of dialogs.](assets/dialogs/dialogs_types.png)\n\n## Dialogs\n\nA dialog is a type of modal window that appears in front of app content to\nprovide critical information or ask for a decision. Dialogs disable all app\nfunctionality when they appear, and remain on screen until confirmed, dismissed,\nor a required action has been taken.\n\nDialogs are purposefully interruptive, so they should be used sparingly.\n\n### Dialog examples\n\nAPI and source code:\n\n*   `MaterialAlertDialogBuilder`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/dialog/MaterialAlertDialogBuilder)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/MaterialAlertDialogBuilder.java)\n\n## Alert dialog\n\nAlert dialogs interrupt users with urgent information, details, or actions.\n\nThe following example shows an alert dialog.\n\n!["Dialog with title, and text and purple buttons to cancel, decline or accept"](assets/dialogs/dialogs_alert.png)\n\nIn code:\n\n```kt\nMaterialAlertDialogBuilder(context)\n        .setTitle(resources.getString(R.string.title))\n        .setMessage(resources.getString(R.string.supporting_text))\n        .setNeutralButton(resources.getString(R.string.cancel)) { dialog, which ->\n            // Respond to neutral button press\n        }\n        .setNegativeButton(resources.getString(R.string.decline)) { dialog, which ->\n            // Respond to negative button press\n        }\n        .setPositiveButton(resources.getString(R.string.accept)) { dialog, which ->\n            // Respond to positive button press\n        }\n        .show()\n```\n\n## Simple dialog\n\nSimple dialogs can display items that are immediately actionable when selected.\nThey don’t have text buttons.\n\nAs simple dialogs are interruptive, they should be used sparingly.\nAlternatively, dropdown menus provide options in a non-modal, less disruptive\nway.\n\nThe following example shows a simple dialog.\n\n!["Dialog with title and three list items"](assets/dialogs/dialogs_simple.png)\n\nIn code:\n\n```kt\nval items = arrayOf("Item 1", "Item 2", "Item 3")\n\nMaterialAlertDialogBuilder(context)\n        .setTitle(resources.getString(R.string.title))\n        .setItems(items) { dialog, which ->\n             // Respond to item chosen\n         }\n        .show()\n```\n\n## Confirmation dialog\n\nConfirmation dialogs give users the ability to provide final confirmation of a\nchoice before committing to it, so they have a chance to change their minds if\nnecessary.\n\nIf the user confirms a choice, it’s carried out. Otherwise, the user can dismiss\nthe dialog. For example, users can listen to multiple ringtones but only make a\nfinal selection upon tapping “OK.”\n\nThe following example shows a confirmation dialog.\n\n!["Dialog with title, three items with radio buttons, and purple text buttons to\ncancel and accept"](assets/dialogs/dialogs_confirmation.png)\n\n```kt\nval singleItems = arrayOf("Item 1", "Item 2", "Item 3")\nval checkedItem = 1\n\nMaterialAlertDialogBuilder(context)\n        .setTitle(resources.getString(R.string.title))\n        .setNeutralButton(resources.getString(R.string.cancel)) { dialog, which ->\n            // Respond to neutral button press\n        }\n        .setPositiveButton(resources.getString(R.string.ok)) { dialog, which ->\n            // Respond to positive button press\n        }\n        // Single-choice items (initialized with checked item)\n        .setSingleChoiceItems(singleItems, checkedItem) { dialog, which ->\n             // Respond to item chosen\n         }\n        .show()\n```\n\nFor multiple choice items you can do as follows:\n\n```kt\nval multiItems = arrayOf("Item 1", "Item 2", "Item 3")\nval checkedItems = booleanArrayOf(true, false, false, false)\n\nMaterialAlertDialogBuilder(context)\n        ...\n        //Multi-choice items (initialized with checked items)\n        .setMultiChoiceItems(multiItems, checkedItems) { dialog, which, checked ->\n            // Respond to item chosen\n        }\n        .show()\n```\n\n## Full-screen dialog\n\nFull-screen dialogs group a series of tasks, such as creating a calendar entry\nwith the event title, date, location, and time. Because they take up the entire\nscreen, full-screen dialogs are the only dialogs over which other dialogs can\nappear.\n\nThere is no specific Material implementation of a full-screen dialog. You can\nimplement it by using a\n[`DialogFragment`](https://developer.android.com/reference/androidx/fragment/app/DialogFragment)\nas explained in the\n[Android Developer guides](https://developer.android.com/guide/topics/ui/dialogs#FullscreenDialog).\n\n### Anatomy and key properties\n\nA dialog has a container, content (either supporting text or a set of items of a\nparticular type), a background scrim, and, optionally, title and buttons.\n\n![anatomy](assets/dialogs/dialogs_anatomy.png)\n\n1.  Container\n2.  Title (optional)\n3.  Content\n4.  Buttons (optional)\n5.  Scrim\n\n#### Container attributes\n\nElement                             | **Attribute**                                            | **Related methods**                                    | **Default value**\n----------------------------------- | -------------------------------------------------------- | ------------------------------------------------------ | -----------------\n**Color**                           | N/A                                                      | N/A                                                    | `?attr/colorSurface`\n**Shape**                           | `app:shapeAppearance`<br/>`app:shapeAppearanceOverlay`   | N/A                                                    | `?attr/shapeAppearanceMediumComponent`\n**Background inset start and end**  | `app:backgroundInsetStart`<br/>`app:backgroundInsetEnd`  | `setBackgroundInsetStart`<br/>`setBackgroundInsetEnd`  | `24dp`\n**Background inset top and bottom** | `app:backgroundInsetTop`<br/>`app:backgroundInsetBottom` | `setBackgroundInsetTop`<br/>`setBackgroundInsetBottom` | `80dp`\n\n#### Title attributes\n\nElement        | **Attribute**            | **Related methods**              | **Default value**\n-------------- | ------------------------ | -------------------------------- | -----------------\n**Text label** | N/A                      | `setTitle`<br/>`setCustomTitle`  | `null`\n**Text color** | `android:textColor`      | N/A                              | `?attr/colorOnSurface` at 87%\n**Typography** | `android:textAppearance` | N/A                              | `?attr/textAppearanceSubtitle1`\n**Icon**       | N/A                      | `setIcon`<br/>`setIconAttribute` | `null`\n\n#### Content attributes\n\n**Supporting text**\n\nElement        | **Attribute**            | **Related methods** | **Default value**\n-------------- | ------------------------ | ------------------- | -----------------\n**Text**       | N/A                      | `setMessage`        | `null`\n**Color**      | `android:textColor`      | N/A                 | `?attr/colorOnSurface` at 60%\n**Typography** | `android:textAppearance` | N/A                 | `?attr/textAppearanceBody2`\n\n**List item**\n\nElement                                 | **Attribute**                  | **Related methods**    | **Default value**\n--------------------------------------- | ------------------------------ | ---------------------- | -----------------\n**List item layout**                    | `app:listItemLayout`           | `setItems`             | [`@layout/mtrl_alert_select_dialog_item`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/layout/mtrl_alert_select_dialog_item.xml)\n**List item layout style**              | N/A                            | N/A                    | `?attr/materialAlertDialogBodyTextStyle`\n**List item text color**                | `android:textColor`            | N/A                    | `?attr/colorOnSurface` at 60%\n**List item typography**                | `android:textAppearance`       | N/A                    | `?attr/textAppearanceBody2`\n**Multi choice item layout**            | `app:multiChoiceItemLayout`    | `setMultiChoiceItems`  | [`@layout/mtrl_alert_select_dialog_multichoice`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/layout/mtrl_alert_select_dialog_multichoice.xml)\n**Single choice item layout**           | `app:singleChoiceItemLayout`   | `setSingleChoiceItems` | [`@layout/mtrl_alert_select_dialog_singlechoice`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/layout/mtrl_alert_select_dialog_singlechoice.xml)\n**Multi/single choice item style**      | `android:checkedTextViewStyle` | N/A                    | `@style/Widget.MaterialComponents.CheckedTextView`\n**Multi/single choice item text color** | `android:textColor`            | N/A                    | `?attr/colorOnSurface` at 60%\n**Multi/single choice item typography** | `android:textAppearance`       | N/A                    | `?attr/textAppearanceBody1`\n\n_**Note:** You can set any view to be the content of your dialog via the\n`setView` method._\n\n#### Buttons attributes\n\nElement                                 | **Attribute**               | **Related methods** | **Default value**\n--------------------------------------- | --------------------------- | ------------------- | -----------------\n**Buttons theme attributes**            | `app:buttonBar*ButtonStyle` | N/A                 | `@style/Widget.MaterialComponents.Button.TextButton.Dialog`\n**Buttons (neutral/negative/positive)** | N/A                         | `set*Button`        | `null`\n**Icons**                               | N/A                         | `set*ButtonIcon`    | `null`\n\nFor specific button attributes, see the\n[Buttons documentation](https://github.com/material-components/material-components-android/tree/master/docs/components/Button.md).\n\n#### Scrim attributes\n\nElement         | **Attribute**                 | **Related methods** | **Default value**\n--------------- | ----------------------------- | ------------------- | -----------------\n**Dim ammount** | `android:backgroundDimAmount` | N/A                 | 32%\n\n#### Theme overlays\n\nElement                    | **Theme overlay**\n-------------------------- | -----------------\n**Default theme overlay**  | `ThemeOverlay.MaterialComponents.MaterialAlertDialog`\n**Centered theme overlay** | `ThemeOverlay.MaterialComponents.MaterialAlertDialog.Centered`\n\nDefault theme overlay attribute: `?attr/materialAlertDialogTheme`\n\n#### Theme attributes\n\nElement                   | **Theme attribute**                       | **Default value**\n------------------------- | ----------------------------------------- | -----------------\n**Default style**         | `?attr/alertDialogStyle`                  | `@style/MaterialAlertDialog.MaterialComponents`\n**Title text style**      | `?attr/materialAlertDialogTitleTextStyle` | `@style/MaterialAlertDialog.MaterialComponents.Title.Text`\n**Supporting text style** | `?attr/materialAlertDialogBodyTextStyle`  | `@style/MaterialAlertDialog.MaterialComponents.Body.Text`\n\nSee full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/values/styles.xml),\n[attributes](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/values/attrs.xml),\nand\n[theme overlays](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/values/themes.xml).\n\n## Theming dialogs\n\nA dialog supports\n[Material Theming](https://material.io/components/dialogs/#theming) and can be\ncustomized in terms of color, typography and shape.\n\n### Dialog theming example\n\nAPI and source code:\n\n*   `MaterialAlertDialogBuilder`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/dialog/MaterialAlertDialogBuilder)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/MaterialAlertDialogBuilder.java)\n\nThe following example shows a dialog with Material Theming.\n\n![Dialog with title and text buttons in brown and selected radio button in pink](assets/dialogs/dialogs_theming.png)\n\n#### Implementing dialog theming\n\nSetting the theme attribute `materialAlertDialogTheme` to your custom\n`ThemeOverlay` will affect all dialogs.\n\nIn `res/values/themes.xml`:\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n  ...\n  <item name="materialAlertDialogTheme">@style/ThemeOverlay.App.MaterialAlertDialog</item>\n</style>\n\n<style name="ThemeOverlay.App.MaterialAlertDialog" parent="ThemeOverlay.MaterialComponents.MaterialAlertDialog">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorSecondary">@color/shrine_pink_100</item>\n    <item name="colorSurface">@color/shrine_pink_light</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="alertDialogStyle">@style/MaterialAlertDialog.App</item>\n    <item name="materialAlertDialogTitleTextStyle">@style/MaterialAlertDialog.App.Title.Text</item>\n    <item name="buttonBarPositiveButtonStyle">@style/Widget.App.Button</item>\n    <item name="buttonBarNeutralButtonStyle">@style/Widget.App.Button</item>\n</style>\n```\n\nIn `res/values/styles.xml`:\n\n```xml\n<style name="MaterialAlertDialog.App" parent="MaterialAlertDialog.MaterialComponents">\n    <item name="shapeAppearance">@style/ShapeAppearance.App.MediumComponent</item>\n</style>\n\n<style name="MaterialAlertDialog.App.Title.Text" parent="MaterialAlertDialog.MaterialComponents.Title.Text">\n     <item name="android:textColor">@color/shrine_pink_900</item>\n</style>\n\n<style name="Widget.App.Button" parent="Widget.MaterialComponents.Button.TextButton.Dialog">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button.TextButton</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="ThemeOverlay.App.Button" parent="">\n    <item name="colorPrimary">@color/shrine_pink_900</item>\n</style>\n\n<style name="ShapeAppearance.App.MediumComponent" parent="ShapeAppearance.MaterialComponents.MediumComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">8dp</item>\n</style>\n\n<style name="ShapeAppearance.App.SmallComponent" parent="ShapeAppearance.MaterialComponents.SmallComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">4dp</item>\n</style>\n```\n\nOr if you want to only change one specific dialog, pass the `themeResId` to the\nconstructor:\n\n```kt\nMaterialAlertDialogBuilder(context,  R.style.ThemeOverlay_App_MaterialAlertDialog)\n        ...\n        .show()\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        apiKey="zv034bdme9je7c9d43chzmc2yg"\n        platform="android"\n        storyParams={{"component":"dialogs"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/dialogs.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories/dialogs.stories.jsx"})},913:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__(5),__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(19);__webpack_exports__.default={title:"FloatingButton"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"floatingButton"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Floating action buttons"\nlayout: detail\nsection: components\nexcerpt:  "A floating action button (FAB) represents the primary action of a screen."\niconId: button\npath: /catalog/floating-action-button/\n--\x3e\n\n# Floating action buttons\n\nA\n[floating action button (FAB)](https://material.io/components/buttons-floating-action-button)\nrepresents the primary action of a screen.\n\n!["A FAB on a screen"](assets/fabs/fab_hero.png)\n\n**Contents**\n\n*   [Using FABs](#using-fabs)\n*   [Regular FABs](#regular-fabs)\n*   [Mini FABs](#mini-fabs)\n*   [Extended FABs](#extended-fabs)\n*   [Theming FABs](#theming-fabs)\n\n## Using FABs\n\nA FAB performs the primary, or most common, action on a screen. It appears in\nfront of all screen content, typically as a circular shape with an icon in its\ncenter.\n\nBefore you can use Material FABs, you need to add a dependency to the Material\nComponents for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\nNote: If the `FloatingActionButton` is a child of a `CoordinatorLayout`, you get\ncertain behaviors for free. It will automatically shift so that any displayed\n`Snackbar`s do not cover it, and will automatially hide when covered by an\n`AppBarLayout` or `BottomSheetBehavior`.\n\n### Making FABs accessible\n\nYou should set a content description on a FAB via the\n`android:contentDescription` attribute or `setContentDescription` method so that\nscreen readers like TalkBack are able to announce their purpose or action. Text\nrendered in Extended FABs is automatically provided to accessibility services,\nso additional content labels are usually unnecessary.\n\n### Visibility\n\nUse the `show` and `hide` methods to animate the visibility of a\n`FloatingActionButton` or an `ExtendedFloatingActionButton`. The show animation\ngrows the widget and fades it in, while the hide animation shrinks the widget\nand fades it out.\n\n```kt\n// To show:\nfab.show()\n// To hide:\nfab.hide()\n```\n\n### Extending and Shrinking\n\nUse the `extend` and `shrink` methods to animate showing and hiding the text of\nan `ExtendedFloatingActionButton`. The extend animation extends the FAB to show\nthe text and the icon. The shrink animation shrinks the FAB to show just the\nicon.\n\n```kt\n// To extend:\nextendedFab.extend()\n// To shrink:\nextendedFab.shrink()\n```\n\n### Sizing FABs\n\nThe `FloatingActionButton` can be sized either by using the discrete sizing\nmodes or a custom size.\n\nThere are three `app:fabSize` modes:\n\n*   `normal` - the normal sized button, 56dp.\n*   `mini` - the mini sized button, 40dp.\n*   `auto` (default) - the button size will change based on the window size. For\n    small sized windows (largest screen dimension < 470dp) this will select a\n    mini sized button, and for larger sized windows it will select a normal\n    sized button.\n\nOr, you can set a custom size via the `app:fabCustomSize` attribute. If set,\n`app:fabSize` will be ignored, unless the custom size is cleared via the\n`clearCustomSize` method.\n\n### Types\n\nThere are three types of FABS: 1. [Regular FABs](#regular-fabs), 2.\n[Mini FABs](#mini-fabs), 3. [Extended FABs](#extended-fabs)\n\n![FAB types](assets/fabs/FAB_types.png)\n\n## Regular FABs\n\nRegular FABs are FABs that are not expanded and are a regular size.\n\nAPI and source code:\n\n*   `FloatingActionButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/floatingactionbutton/FloatingActionButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/FloatingActionButton.java)\n\n### Regular FAB example\n\nThe following example shows a regular FAB with a plus icon.\n\n![56dp round teal FAB with black plus icon](assets/fabs/fab_regular.png)\n\nIn the layout:\n\n```xml\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    ...\n    android:layout_width="match_parent"\n    android:layout_height="match_parent">\n\n  \x3c!-- Main content --\x3e\n\n  <com.google.android.material.floatingactionbutton.FloatingActionButton\n      android:id="@+id/floating_action_button"\n      android:layout_width="wrap_content"\n      android:layout_height="wrap_content"\n      android:layout_gravity="bottom|end"\n      android:layout_margin="16dp"\n      android:contentDescription="@string/fab_content_desc"\n      app:srcCompat="@drawable/ic_plus_24"/>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\nIn code:\n\n```kt\nfab.setOnClickListener {\n    // Respond to FAB click\n}\n```\n\n#### Anatomy\n\n![Regular FAB anatomy diagram](assets/fabs/FAB_anatomy-long.png)\n\nA regular FAB has a container and an icon.\n\n1.  Container\n1.  Icon\n\n## Mini FABs\n\nA mini FAB should be used on smaller screens.\n\nMini FABs can also be used to create visual continuity with other screen\nelements.\n\nAPI and source code:\n\n*   `FloatingActionButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/floatingactionbutton/FloatingActionButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/FloatingActionButton.java)\n\n### Mini FAB example\n\nThe following example shows a mini FAB with a plus icon.\n\n![40dp round teal FAB with black plus icon](assets/fabs/fab_mini.png)\n\nIn the layout:\n\n```xml\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    ...\n    >\n\n  \x3c!-- Main content --\x3e\n\n  <com.google.android.material.floatingactionbutton.FloatingActionButton\n      ...\n      app:fabSize="mini"/>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\nIn code:\n\n```kt\nfab.setOnClickListener {\n    // Respond to FAB click\n}\n```\n\n#### Anatomy\n\n![Mini FAB anatomy diagram](assets/fabs/miniFAB_anatomy-long.png)\n\nA mini FAB has a container and an icon.\n\n1.  Container\n1.  Icon\n\n### Regular and mini FAB key properties\n\n#### Container attributes\n\nElement                       | Attribute                                      | Related method(s)                                                                     | Default value\n----------------------------- | ---------------------------------------------- | ------------------------------------------------------------------------------------- | -------------\n**Color**                     | `app:backgroundTint`                           | `setBackgroundTintList`<br/>`getBackgroundTintList`                                   | `?attr/colorSecondary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/color/mtrl_fab_bg_color_selector.xml))\n**Stroke**                    | `app:borderWidth`                              | N/A                                                                                   | `0.5dp`\n**Size**                      | `app:fabSize`<br>`app:fabCustomSize`           | `setSize`<br/>`setCustomSize`<br/>`clearCustomSize`<br/>`getSize`<br/>`getCustomSize` | `auto`\n**Shape**                     | `shapeAppearance`<br/>`shapeAppearanceOverlay` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                               | `?attr/shapeAppearanceSmallComponent`<br/>\n**Elevation**                 | `app:elevation`                                | `setElevation`<br/>`getCompatElevation`                                               | `6dp`\n**Hovered/Focused elevation** | `app:hoveredFocusedTranslationZ`               | `setCompatHoveredFocusedTranslationZ`<br/>`getCompatHoveredFocusedTranslationZ`       | `2dp`\n**Pressed elevation**         | `app:pressedTranslationZ`                      | `setCompatPressedTranslationZ`<br/>`getCompatPressedTranslationZ`                     | `6dp`\n**Ripple**                    | `app:rippleColor`                              | `setRippleColor`<br/>`getRippleColor`<br/>`getRippleColorStateList`                   | variations of `?attr/colorOnSecondary`, see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/color/mtrl_fab_ripple_color.xml)\n**Motion**                    | `app:showMotionSpec`<br>`app:hideMotionSpec`   | `set*MotionSpec`<br/>`set*MotionSpecResource`<br/>`get*MotionSpec`                    | see [animators](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/animator)\n\n#### Icon attributes\n\nElement   | Attribute       | Related method(s)                                           | Default value\n--------- | --------------- | ----------------------------------------------------------- | -------------\n**Icon**  | `app:srcCompat` | `setImageDrawable`<br/>`setImageResource`<br/>`getDrawable` | `null`\n**Color** | `app:tint`      | `setImageTintList`<br/>`getImageTintList`                   | `?attr/colorOnSecondary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/color/mtrl_fab_icon_text_color_selector.xml))\n\n#### Styles\n\nElement           | Style\n----------------- | ------------------------------------------------\n**Default style** | `Widget.MaterialComponents.FloatingActionButton`\n\nDefault style theme attribute: `?attr/floatingActionButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/values/attrs.xml).\n\n## Extended FABs\n\nThe extended FAB is wider, and it includes a text label.\n\nNote: `ExtendedFloatingActionButton` is a child class of\n[`MaterialButton`](Button.md), rather than `FloatingActionButton`. This means\nthat several attributes which are applicable to `FloatingActionButton` have\ndifferent naming in `ExtendedFloatingActionButton`. For example,\n`FloatingActionButton` uses `app:srcCompat` to set the icon drawable, whereas\n`ExtendedFloatingActionButton` uses `app:icon`. See the\n[attributes tables](#anatomy-and-key-properties) below for more details.\n\nAPI and source code:\n\n*   `ExtendedFloatingActionButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/floatingactionbutton/ExtendedFloatingActionButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/ExtendedFloatingActionButton.java)\n\n### Extended FAB example\n\nThe following example shows an extended FAB with a plus icon.\n\n![Teal FAB with plus icon and "Extended" label](assets/fabs/fab_extended.png)\n\nIn the layout:\n\n```xml\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    ...\n    >\n\n  \x3c!-- Main content --\x3e\n\n  <com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton\n    android:id="@+id/extended_fab"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:layout_margin="16dp"\n    android:layout_gravity="bottom|end"\n    android:contentDescription="@string/extended_fab_content_desc"\n    android:text="@string/extended_fab_label"\n    app:icon="@drawable/ic_plus_24px"/>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\nIn code:\n\n```kt\nextendedFab.setOnClickListener {\n    // Respond to Extended FAB click\n}\n```\n\n### Anatomy and key properties\n\n![Extended FAB anatomy diagram](assets/fabs/extended-FAB_anatomy-long.png)\n\nAn extended FAB has a text label, a transparent container and an optional icon.\n\n1.  Container\n1.  Icon (Optional)\n1.  Text label\n\n#### Container attributes\n\nElement                       | Attribute                                                                                  | Related method(s)                                                  | Default value\n----------------------------- | ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------ | -------------\n**Color**                     | `app:backgroundTint`                                                                       | `setBackgroundTintList`<br/>`getBackgroundTintList`                | `?attr/colorSecondary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/color/mtrl_fab_bg_color_selector.xml))\n**Stroke color**              | `app:strokeColor`                                                                          | `setStrokeColor`<br/>`getStrokeColor`                              | `null`\n**Stroke width**              | `app:strokeWidth`                                                                          | `setStrokeWidth`<br/>`getStrokeWidth`                              | `0dp`\n**Size**                      | `app:collapsedSize`                                                                        | N/A                                                                |\n**Shape**                     | `app:shapeAppearance`<br/>`app:shapeAppearanceOverlay`                                     | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`            | `?attr/shapeAppearanceSmallComponent`\n**Elevation**                 | `app:elevation`                                                                            | `setElevation`<br/>`getElevation`                                  | `6dp`\n**Hovered/Focused elevation** | `app:hoveredFocusedTranslationZ`                                                           | N/A                                                                | `2dp`\n**Pressed elevation**         | `app:pressedTranslationZ`                                                                  | N/A                                                                | `6dp`\n**Ripple**                    | `app:rippleColor`                                                                          |                                                                    | variations of `?attr/colorOnSecondary`, see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/color/mtrl_fab_ripple_color.xml)\n**Motion**                    | `app:showMotionSpec`<br>`app:hideMotionSpec`<br/>`extendMotionSpec`<br/>`shrinkMotionSpec` | `set*MotionSpec`<br/>`set*MotionSpecResource`<br/>`get*MotionSpec` | see [animators](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/animator)\n\n#### Icon attributes\n\nElement                           | Attribute         | Related method(s)                                         | Default value\n--------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                          | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                         | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnSecondary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/color/mtrl_fab_icon_text_color_selector.xml))\n**Size**                          | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `24dp`\n**Padding between icon and text** | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `16dp`\n\n#### Text label\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnSecondary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/color/mtrl_fab_icon_text_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceButton`\n\n#### Styles\n\nElement                                   | Style\n----------------------------------------- | -----\n**Default style**                         | `Widget.MaterialComponents.ExtendedFloatingActionButton.Icon`\n**Text-only when**<br/>**extended style** | `Widget.MaterialComponents.ExtendedFloatingActionButton`\n\nDefault style theme attribute: `?attr/extendedFloatingActionButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/values/attrs.xml).\n\n## Theming FABs\n\n### FAB theming example\n\nAPI and source code:\n\n*   `FloatingActionButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/floatingactionbutton/FloatingActionButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/FloatingActionButton.java)\n*   `ExtendedFloatingActionButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/floatingactionbutton/ExtendedFloatingActionButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/ExtendedFloatingActionButton.java)\n\nThe following example shows a regular, mini, and extended FABs with Material\nTheming.\n\n!["3 square pink FABs with cut corners with brown plus icons: 56dp, 40dp, 56dp\nwith "Extended" label"](assets/fabs/fab_theming.png)\n\n#### Implementing FAB theming\n\nUsing theme attributes and styles in `res/values/styles.xml` (themes all FABs\nand affects other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="colorSecondary">@color/shrine_pink_100</item>\n    <item name="colorOnSecondary">@color/shrine_pink_900</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="ShapeAppearance.App.SmallComponent" parent="ShapeAppearance.MaterialComponents.SmallComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">4dp</item>\n</style>\n```\n\nOr using a default style theme attribute, styles and a theme overlay (themes all\nFABs but does not affect other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="extendedFloatingActionButtonStyle">@style/Widget.App.ExtendedFloatingActionButton</item>\n    <item name="floatingActionButtonStyle">@style/Widget.App.FloatingActionButton</item>\n</style>\n\n<style name="Widget.App.ExtendedFloatingActionButton" parent="Widget.MaterialComponents.ExtendedFloatingActionButton.Icon">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.FloatingActionButton</item>\n    <item name="shapeAppearanceOverlay">\n      @style/ShapeAppearance.App.SmallComponent\n    </item>\n</style>\n\n<style name="Widget.App.FloatingActionButton" parent="Widget.MaterialComponents.FloatingActionButton">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.FloatingActionButton</item>\n    <item name="shapeAppearanceOverlay">\n      @style/ShapeAppearance.App.SmallComponent\n    </item>\n</style>\n\n<style name="ThemeOverlay.App.FloatingActionButton" parent="">\n    <item name="colorSecondary">@color/shrine_pink_100</item>\n    <item name="colorOnSecondary">@color/shrine_pink_900</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n  </style>\n```\n\nor using one of the styles in the layout (affects only this FAB):\n\n```xml\n<com.google.android.material.floatingactionbutton.FloatingActionButton\n    ...\n    style="@style/Widget.App.FloatingActionButton"\n/>\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        apiKey="zv034bdme9je7c9d43chzmc2yg"\n        platform="android"\n        storyParams={{"component":"floatingButton"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/floatingButton.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories/floatingButton.stories.jsx"})},914:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__(5),__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(19);__webpack_exports__.default={title:"Radio"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"radio"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Material selection controls: Radio buttons"\nlayout: detail\nsection: components\nexcerpt: "Selection controls allow the user to select options."\niconId: radiobutton\npath: /catalog/radiobuttons/\n--\x3e\n\n# Selection controls: radio buttons\n\n[Selection controls](https://material.io/components/selection-controls#usage)\nallow the user to select options.\n\nUse radio buttons to:\n\n*   Select a single option from a list\n*   Expose all available options\n*   If available options can be collapsed, consider using a dropdown menu\n    instead, as it uses less space.\n\n![Settings menu with radio buttons for ringtones](assets/radiobutton/radiobutton_hero.png)\n\n**Contents**\n\n*   [Using radio buttons](#using-radio-buttons)\n*   [Radio button](#radio-button)\n*   [Theming radio buttons](#theming-radio-buttons)\n\n## Using radio buttons\n\nBefore you can use Material radio buttons, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n_**Note:** `<RadioButton>` is auto-inflated as\n`<com.google.android.material.button.MaterialRadioButton>` via\n`MaterialComponentsViewInflater` when using a non-Bridge\n`Theme.MaterialComponents.*` theme._\n\n### Making radio buttons accessible\n\nRadio buttons support content labeling for accessibility and are readable by\nmost screen readers, such as TalkBack. Text rendered in radio buttons is\nautomatically provided to accessibility services. Additional content labels are\nusually unnecessary.\n\n### Grouping radio buttons\n\nChanges in the states of one radio button can affect other buttons in the group.\nSpecifically, selecting a `RadioButton` in a `RadioGroup` will de-select all\nother buttons in that group. See the\n[example section below](#radio-buttons-example) for implementation details.\n\n## Radio button\n\nA radio button is a circle that is filled in with an inset when selected. Radio\nbuttons allow the user to select one option from a set. Use radio buttons when\nthe user needs to see all available options. If available options can be\ncollapsed, consider using a dropdown menu because it uses less space.\n\n### Radio buttons example\n\nAPI and source code:\n\n*   `MaterialRadioButton`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/radiobutton/MaterialRadioButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/radiobutton/MaterialRadioButton.java)\n*   `RadioGroup`\n    *   [Class definition](https://developer.android.com/reference/android/widget/RadioGroup)\n\nThe following example shows a radio button group with five radio buttons.\n\n![Example radio button group with 5 radio buttons, the first one is selected and\nthe last one is disabled.](assets/radiobutton/radiobutton_example.png)\n\nIn the layout:\n\n```xml\n<RadioGroup\n    android:id="@+id/radioGroup"\n    android:checkedButton="@+id/radio_button_1"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content">\n    <RadioButton\n        android:id="@+id/radio_button_1"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:text="@string/label_1"/>\n    <RadioButton\n        android:id="@+id/radio_button_2"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:text="@string/label_2"/>\n    <RadioButton\n        android:id="@+id/radio_button_3"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:text="@string/label_3"/>\n    <RadioButton\n        android:id="@+id/radio_button_4"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:text="@string/label_4"/>\n    <RadioButton\n        android:id="@+id/radio_button_5"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:enabled="false"\n        android:text="@string/label_5"/>\n</RadioGroup>\n```\n\nIn code:\n\n```kt\nval checkedRadioButtonId = radioGroup.checkedRadioButtonId // Returns View.NO_ID if nothing is checked.\nradioGroup.setOnCheckedChangeListener { group, checkedId ->\n    // Responds to child RadioButton checked/unchecked\n}\n\n// To check a radio button\nradioButton.isChecked = true\n\n// To listen for a radio button\'s checked/unchecked state changes\nradioButton.setOnCheckedChangeListener { buttonView, isChecked\n    // Responds to radio button being checked/unchecked\n}\n```\n\n## Key properties\n\n### Radio button attributes\n\nElement                    | Attribute                                  | Related method(s)                                          | Default value\n-------------------------- | ------------------------------------------ | ---------------------------------------------------------- | -------------\n**To use material colors** | `app:useMaterialThemeColors`               | `setUseMaterialThemeColors`<br/>`isUseMaterialThemeColors` | `true` (ignored if `app:buttonTint` is set)\n**Color**                  | `app:buttonTint`                           | `setButtonTintList`<br/>`getButtonTintList`                | `null`\n**Min size**               | `android:minWidth`<br/>`android:minHeight` | `(set/get)MinWidth`<br/>`(set/get)MinHeight`               | `?attr/minTouchTargetSize`\n\nThe color of the radio button defaults to `?attr/colorOnSurface` (unchecked) and\n`?attr/colorSecondary` (checked) defined in your app theme. If you want to\noverride this behavior, as you might with a custom drawable that should not be\ntinted, set `app:useMaterialThemeColors` to `false`:\n\n```xml\n<RadioButton\n        ...\n    app:useMaterialThemeColors="false"\n    />\n```\n\n### Text label attributes\n\nElement        | Attribute                | Related method(s)                  | Default value\n-------------- | ------------------------ | ---------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`            | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColors` | inherits from `AppCompatRadioButton`\n**Typography** | `android:textAppearance` | `setTextAppearance`                | inherits from `AppCompatRadioButton`\n\n### Radio button states\n\nRadio buttons can be selected or unselected. Radio buttons have enabled,\ndisabled, hover, focused, and pressed states.\n\n![Radio button states in an array. Columns are enabled, disabled, hover,\nfocused, pressed. Rows are selected or\nunselected](assets/radiobutton/radiobutton_states.png)\n\n### Styles\n\nElement           | Style\n----------------- | ------------------------------------------------------\n**Default style** | `Widget.MaterialComponents.CompoundButton.RadioButton`\n\nDefault style theme attribute: `?attr/radioButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/radiobutton/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/radiobutton/res/values/attrs.xml).\n\n## Theming radio buttons\n\nRadio buttons support\n[Material Theming](https://material.io/components/selection-controls#theming)\nand can be customized in terms of color and typography.\n\n### Radio button theming example\n\nAPI and source code:\n\n*   `MaterialRadioButton`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/radiobutton/MaterialRadioButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/radiobutton/MaterialRadioButton.java)\n*   `RadioGroup`\n    *   [Class definition](https://developer.android.com/reference/android/widget/RadioGroup)\n\nThe following example shows a radio button with Material Theming.\n\n!["5 radio buttons with brown text; first selected with pink outline and fill,\nlast disabled with light brown text and\nbutton"](assets/radiobutton/radiobutton_theming.png)\n\n#### Implementing radio button theming\n\nUsing theme attributes in `res/values/styles.xml` (themes all radio buttons and\naffects other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="colorSecondary">@color/shrine_pink_100</item>\n</style>\n\n```\n\nor using default style theme attributes, styles and theme overlays (themes all\nradio buttons but does not affect other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="radioButtonStyle">@style/Widget.App.RadioButton</item>\n</style>\n\n<style name="Widget.App.RadioButton" parent="Widget.MaterialComponents.CompoundButton.RadioButton">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.RadioButton</item>\n</style>\n\n<style name="ThemeOverlay.App.RadioButton" parent="">\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="colorSecondary">@color/shrine_pink_100</item>\n</style>\n```\n\nyou can also change the radio button colors via the `?attr/buttonTint`\nattribute:\n\n```xml\n<style name="Widget.App.RadioButton" parent="Widget.MaterialComponents.CompoundButton.RadioButton">\n   <item name="buttonTint">@color/button_tint</item>\n</style>\n```\n\nand in `color/button_tint.xml`:\n\n```xml\n<selector xmlns:android="http://schemas.android.com/apk/res/android">\n  <item android:color="@color/shrine_pink_900" android:state_checked="true"/>\n  <item android:alpha="0.38" android:color="@color/shrine_pink_100" android:state_enabled="false"/>\n  <item android:color="@color/shrine_pink_100"/>\n</selector>\n```\n\nor using the styles in the layout (affects only this radio button):\n\n```xml\n<RadioButton\n        ...\n    style="@style/Widget.App.RadioButton"\n    />\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        apiKey="zv034bdme9je7c9d43chzmc2yg"\n        platform="android"\n        storyParams={{"component":"radio"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/radio.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories/radio.stories.jsx"})},915:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__(5),__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(19);__webpack_exports__.default={title:"Slider"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"slider"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Sliders"\nlayout: detail\nsection: components\nexcerpt: "Sliders allow users to make selections from a range of values."\niconId: slider\npath: /catalog/sliders/\n--\x3e\n\n# Slider\n\n[Sliders](https://material.io/components/sliders/) allow users to make\nselections from a range of values.\n\n!["Slider with sound icon buttons on each end."](assets/slider/slider_hero.png)\n\n**Contents**\n\n*   [Using sliders](#using-sliders)\n*   [Continuous slider](#continuous-slider)\n*   [Discrete slider](#discrete-slider)\n*   [Theming sliders](#theming-sliders)\n\n## Using sliders\n\nBefore you can use Material sliders, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n### Usage\n\n![Single point sliders](assets/slider/slider_basic.png)\n\nA `Slider` can be added in a layout like so:\n\n```xml\n\x3c!-- Continuous slider --\x3e\n<com.google.android.material.slider.Slider\n    ...\n    android:valueFrom="0.0"\n    android:valueTo="100.0"  />\n\n\x3c!-- Discrete slider --\x3e\n<com.google.android.material.slider.Slider\n    ...\n    android:valueFrom="0.0"\n    android:valueTo="100.0"\n    android:stepSize="10.0"  />\n```\n\nChanges to a slider can be observed like so:\n\n```kt\nslider.addOnSliderTouchListener(object : Slider.OnSliderTouchListener {\n    override fun onStartTrackingTouch(slider: Slider) {\n        // Responds to when slider\'s touch event is being started\n    }\n\n    override fun onStopTrackingTouch(slider: Slider) {\n        // Responds to when slider\'s touch event is being stopped\n    }\n})\n\nslider.addOnChangeListener { slider, value, fromUser ->\n    // Responds to when slider\'s value is changed\n}\n```\n\n![Range slider](assets/slider/slider_basic_range.png)\n\nSimilarly, a `RangeSlider` can be added in a layout like so:\n\n```xml\n\x3c!-- Continuous slider --\x3e\n<com.google.android.material.slider.RangeSlider\n    ...\n    android:valueFrom="0.0"\n    android:valueTo="100.0"\n    app:values="@array/initial_values"  />\n\n\x3c!-- Discrete slider --\x3e\n<com.google.android.material.slider.RangeSlider\n    ...\n    android:valueFrom="0.0"\n    android:valueTo="100.0"\n    app:values="@array/initial_slider_values"\n    android:stepSize="10.0"  />\n```\n\nAnd in `values/arrays.xml`:\n\n```xml\n<resources>\n  <array name="initial_slider_values">\n    <item>20.0</item>\n    <item>70.0</item>\n  </array>\n</resources>\n```\n\nChanges to a range slider can be observed like so:\n\n```kt\nrangeSlider.addOnSliderTouchListener(object : RangeSlider.OnSliderTouchListener {\n    override fun onStartTrackingTouch(slider: RangeSlider) {\n        // Responds to when slider\'s touch event is being started\n    }\n\n    override fun onStopTrackingTouch(slider: RangeSlider) {\n        // Responds to when slider\'s touch event is being stopped\n    }\n})\n\nrangeSlider.addOnChangeListener { rangeSlider, value, fromUser ->\n    // Responds to when slider\'s value is changed\n}\n```\n\n### Making sliders accessible\n\nSliders support setting content descriptors for use with screen readers. While\noptional, we strongly encourage their use.\n\nThat can be done in XML via the `android:contentDescription` attribute or\nprogrammatically like so:\n\n```kt\nslider.contentDescription = contentDescription\n```\n\nAdditionaly, if using a `TextView` to display the value of the slider, you\nshould set `android:labelFor` on it, so that screen readers announce that\n`TextView` refers to the slider.\n\n### Adding/removing the value label\n\nBy default, the slider will show a value label above the thumb when it\'s\nselected. You can change how it\'s drawn via the `app:labelBehavior` attribute or\n`setLabelBehavior` method.\n\nThe modes of `app:labelBehavior` are:\n\n*   `floating` (default) - draws the label floating above the bounds of this\n    view\n*   `withinBounds` - draws the label floating within the bounds of this view\n*   `gone` - prevents the label from being drawn\n\n### Setting a `LabelFormatter`\n\nBy using a `LabelFormatter` you can display the selected value using letters to\nindicate magnitude (e.g.: 1.5K, 3M, 12B). That can be achieved through the\n`setLabelFormatter` method.\n\nThe following example shows a slider for a price range in the USD currency.\n\n!["Range slider with range of $0 to $100. Left thumb is set at $20, right thumb\nat $70."](assets/slider/slider_price.png)\n\nIn code:\n\n```kt\nrangeSlider.setLabelFormatter { value: Float ->\n    val format = NumberFormat.getCurrencyInstance()\n    format.maximumFractionDigits = 0\n    format.currency = Currency.getInstance("USD")\n    format.format(value.toDouble())\n}\n```\n\n### Types\n\nThere are two types of sliders: 1. [Continuous slider](#continuous-slider), 2.\n[Discrete slider](#discrete-slider)\n\n!["Slider examples of both continuous and discrete sliders."](assets/slider/slider_types.png)\n\nA slider with two thumbs is called a range slider.\n\n## Continuous slider\n\nContinuous sliders allow users to make meaningful selections that don’t require\na specific value.\n\nAPI and source code:\n\n*   `Slider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/Slider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/Slider.java)\n\nThe following example shows a continuous slider.\n\n!["Continuous sliders with pressed thumb valued at 20."](assets/slider/slider_cont.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.slider.Slider\n    android:id="@+id/slider"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:contentDescription="@string/slider_desc"\n    android:value="20.0"\n    android:valueFrom="0.0"\n    android:valueTo="100.0" />\n```\n\n### Continuous range slider\n\nAPI and source code:\n\n*   `RangeSlider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/RangeSlider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/RangeSlider.java)\n\nThe following example shows a continuous range slider.\n\n!["Continuous range slider with left thumb at 20 and right thumb at 70."](assets/slider/slider_cont_range.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.slider.RangeSlider\n  android:id="@+id/range_slider"\n  android:layout_width="match_parent"\n  android:layout_height="wrap_content"\n  android:contentDescription="@string/slider_desc"\n  app:values="@array/initial_slider_values"\n  android:valueFrom="0.0"\n  android:valueTo="100.0" />\n```\n\n## Discrete slider\n\nDiscrete sliders display a numeric value label upon pressing the thumb, which\nallows a user to input an exact value.\n\nAPI and source code:\n\n*   `Slider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/Slider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/Slider.java)\n\nThe following example shows a discrete slider.\n\n!["Discrete single point slider with pressed thumb at a value of 20."](assets/slider/slider_disc.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.slider.Slider\n    ...\n    android:stepSize="5.0" />\n```\n\n### Discrete range slider\n\nAPI and source code:\n\n*   `RangeSlider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/RangeSlider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/RangeSlider.java)\n\nThe following example shows a discrete range slider.\n\n!["Discrete range slider with left thumb at 20 and right thumb at 70."](assets/slider/slider_disc_range.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.slider.RangeSlider\n    ...\n    android:stepSize="5.0"  />\n```\n\n### Anatomy and key properties\n\nA slider has a track, one or two thumbs, and optional value label. A discrete\nslider also has tick marks.\n\n![Slider anatomy diagram](assets/slider/slider_anatomy.png)\n\n1.  Track\n2.  Thumb\n3.  Value label (optional)\n4.  Tick mark (discrete sliders)\n\n#### Track attributes\n\nElement                                     | Attribute                | Related method(s)                                         | Default value\n------------------------------------------- | ------------------------ | --------------------------------------------------------- | -------------\n**Min value**                               | `android:valueFrom`      | `setValueFrom`<br/>`getValueFrom`                         | N/A\n**Max value**                               | `android:valueTo`        | `setValueTo`<br/>`getValueTo`                             | N/A\n**Step size (discrete)**                    | `android:stepSize`       | `setStepSize`<br/>`getStepSize`                           | N/A\n**Initial selected value (Slider)**         | `android:value`          | `setValue`<br/>`getValue`                                 | N/A\n**Initial selected values (RangeSlider)**   | `app:values`             | `setValues`<br/>`getValues`                               | N/A\n**Height**                                  | `app:trackHeight`        | `setTrackHeight`<br/>`getTrackHeight`                     | `4dp`\n**Color**                                   | `app:trackColor`         | `setTrackTintList`<br/>`getTrackTintList`                 | `null`\n**Color for track\'s active part**           | `app:trackColorActive`   | `setTrackActiveTintList`<br/>`getTrackActiveTintList`     | `?attr/colorPrimary`\n**Color for track\'s inactive part**         | `app:trackColorInactive` | `setTrackInactiveTintList`<br/>`getTrackInactiveTintList` | `?attr/colorPrimary` at 24%\n**Minimum separation for adjacent thumbs**  | `app:minSeparation`      | `setMinSeparation`<br/>`getMinSeparation`                 | `0dp`\n\n_**Note:** `app:trackColor` takes precedence over `app:trackColorActive` and\n`app:trackColorInative`. It\'s a shorthand for setting both values to the same\nthing._\n\n#### Thumb attributes\n\nElement          | Attribute              | Related method(s)                                                                 | Default value\n---------------- | ---------------------- | --------------------------------------------------------------------------------- | -------------\n**Color**        | `app:thumbColor`       | `setThumbTintList`<br/>`getThumbTintList`                                         | `?attr/colorPrimary`\n**Radius**       | `app:thumbRadius`      | `setThumbRadiusResource`<br/>`setThumbRadius`<br/>`getThumbRadius`                | `10dp`\n**Elevation**    | `app:thumbElevation`   | `setThumbElevationResource`<br/>`setThumbElevation`<br/>`getThumbElevation`       | `1dp`\n**Halo color**   | `app:haloColor`        | `setHaloTintList`<br/>`getHaloTintList`                                           | `?attr/colorPrimary` at 24%\n**Halo radius**  | `app:haloRadius`       | `setHaloRadiusResource`<br/>`setHaloRadius`<br/>`getHaloRadius`                   | `24dp`\n**Stroke color** | `app:thumbStrokeColor` | `setThumbStrokeColor`<br/>`setThumbStrokeColorResource`<br/>`getThumbStrokeColor` | `null`\n**Stroke width** | `app:thumbStrokeWidth` | `setThumbStrokeWidth`<br/>`setThumbStrokeWidthResource`<br/>`getThumbStrokeWidth` | `0dp`\n\n#### Value label attributes\n\nElement       | Attribute           | Related method(s)                           | Default value\n------------- | ------------------- | ------------------------------------------- | -------------\n**Style**     | `app:labelStyle`    | N/A                                         | `@style/Widget.MaterialComponents.Tooltip`\n**Formatter** | N/A                 | `setLabelFormatter`<br/>`hasLabelFormatter` | `null`\n**Behavior**  | `app:labelBehavior` | `setLabelBehavior`<br/>`getLabelBehavior`   | `floating`\n\n_**Note:** The value label is a\n[Tooltip](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tooltip/TooltipDrawable.java)._\n\n#### Tick mark attributes\n\nElement                             | Attribute               | Related method(s)                                       | Default value\n----------------------------------- | ----------------------- | ------------------------------------------------------- | -------------\n**Color**                           | `app:tickColor`         | `setTickTintList`<br/>`getTickTintList`                 | `null`\n**Color for track\'s active part**   | `app:tickColorActive`   | `setTickActiveTintList`<br/>`getTickActiveTintList`     | `?attr/colorOnPrimary` at 54%\n**Color for track\'s inactive part** | `app:tickColorInactive` | `setTickInactiveTintList`<br/>`getTickInactiveTintList` | `?attr/colorPrimary` at 54%\n**Tick visible**                    | `app:tickVisible`       | `setTickVisible`<br/>`isTickVisible()`                  | `true`\n\n_**Note:** `app:tickColor` takes precedence over `app:tickColorActive` and\n`app:tickColorInative`. It\'s a shorthand for setting both values to the same\nthing._\n\n#### Styles\n\nElement           | Style\n----------------- | ----------------------------------\n**Default style** | `Widget.MaterialComponents.Slider`\n\nDefault style theme attribute: `?attr/sliderStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/res/values/styles.xml)\nand\n[attributes](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/res/values/attrs.xml).\n\n## Theming sliders\n\nSliders support\n[Material Theming](https://material.io/components/sliders#theming) and can be\ncustomized in terms of color and typography.\n\n### Slider theming example\n\nAPI and source code:\n\n*   `Slider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/Slider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/Slider.java)\n*   `RangeSlider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/RangeSlider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/RangeSlider.java)\n\nThe following example shows a range slider with Material Theming.\n\n!["Slider theming example with pink and brown colors."](assets/slider/slider_theming.png)\n\n#### Implementing slider theming\n\nUsing theme attributes and styles in `res/values/styles.xml` (themes all sliders\nand affects other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n    <item name="colorOnSurface">@color/shrine_pink_100</item>\n</style>\n```\n\nor using a default style theme attribute, styles and a theme overlay (themes all\nsliders but does not affect other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="sliderStyle">@style/Widget.App.Slider</item>\n</style>\n\n<style name="Widget.App.Slider" parent="Widget.MaterialComponents.Slider">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Slider</item>\n    <item name="labelStyle">@style/Widget.App.Tooltip</item>\n  </style>\n\n<style name="ThemeOverlay.App.Slider" parent="">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n    <item name="colorOnSurface">@color/shrine_pink_100</item>\n</style>\n\n<style name="Widget.App.Tooltip" parent="Widget.MaterialComponents.Tooltip">\n    <item name="android:textAppearance">@style/TextAppearance.App.Tooltip</item>\n    <item name="backgroundTint">@color/shrine_pink_900</item>\n  </style>\n\n<style name="TextAppearance.App.Tooltip" parent="TextAppearance.MaterialComponents.Tooltip">\n  <item name="android:textColor">@color/shrine_pink_100</item>\n  <item name="fontFamily">@font/rubik</item>\n  <item name="android:fontFamily">@font/rubik</item>\n</style>\n```\n\nor using the style in the layout (affects only this specific slider):\n\n```xml\n<com.google.android.material.slider.RangeSlider\n    ...\n    style="@style/Widget.App.Slider"  />\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        apiKey="zv034bdme9je7c9d43chzmc2yg"\n        platform="android"\n        storyParams={{"component":"slider"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/slider.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories/slider.stories.jsx"})},916:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__(5),__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(19);__webpack_exports__.default={title:"Snackbar"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"snackbar"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Snackbars"\nlayout: detail\nsection: components\nexcerpt: "Snackbars provide brief messages about app processes at the bottom of the screen."\niconId: toast\npath: /catalog/snackbars/\n--\x3e\n\n# Snackbars\n\n[Snackbars](https://material.io/components/snackbars) provide brief messages\nabout app processes at the bottom of the screen.\n\n![Photo grid: each photo has heart toggle button, 2 selected. Snackbar has\nupload error message and \'retry\' text\nbutton.](assets/snackbar/snackbar_hero.png)\n\n**Contents**\n\n*   [Using snackbars](#using-snackbars)\n*   [Snackbar](#snackbar)\n*   [Theming snackbars](#theming-snackbars)\n\n## Using snackbars\n\nBefore you can use Material snackbars, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\nThe `Snackbar` class provides static `make` methods to produce a snackbar\nconfigured in the desired way. These methods take a `View`, which will be used\nto find a suitable ancestor `ViewGroup` to display the snackbar in, a text\nstring to display, and a duration to display the snackbar for. A suitable\nancestor `ViewGroup` will be either the nearest `CoordinatorLayout` to the\n`View` passed in, or the root `DecorView` if none could be found.\n\nAvailable duration presets are:\n\n*   `LENGTH_INDEFINITE` (Show the snackbar until it\'s either dismissed or\n    another snackbar is shown)\n*   `LENGTH_LONG` (Show the snackbar for a long period of time)\n*   `LENGTH_SHORT` (Show the snackbar for a short period of time)\n\n_**Note:** Snackbars work best if they are displayed inside of a\n[CoordinatorLayout](https://developer.android.com/reference/androidx/coordinatorlayout/widget/CoordinatorLayout).\n`CoordinatorLayout` allows the snackbar to enable behavior like\nswipe-to-dismiss, as well as automatically moving widgets like\n[FloatingActionButton](FloatingActionButton.md)._\n\n### Making snackbars accessible\n\nSnackbars support content labeling for accessibility and are readable by most\nscreen readers, such as TalkBack. Text rendered in snackbars is automatically\nprovided to accessibility services. Additional content labels are usually\nunnecessary.\n\n### Showing a snackbar\n\nCalling `make` creates the snackbar, but doesn\'t cause it to be visible on the\nscreen. To show it, use the `show` method on the returned `Snackbar` instance.\nNote that only one snackbar will be shown at a time. Showing a new snackbar will\ndismiss any previous ones first.\n\nTo show a snackbar with a message and no action:\n\n```kt\n// The view used to make the snackbar.\n// This should be contained within the view hierarchy you want to display the\n// snackbar. Generally it can be the view that was interacted with to trigger\n// the snackbar, such as a button that was clicked, or a card that was swiped.\nval contextView = findViewById<View>(R.id.context_view)\n\nSnackbar.make(contextView, R.string.text_label, Snackbar.LENGTH_SHORT)\n    .show()\n```\n\n### Adding an action\n\nTo add an action, use the `setAction` method on the object returned from `make`.\nSnackbars are automatically dismissed when the action is clicked.\n\nTo show a snackbar with a message and an action:\n\n```kt\nSnackbar.make(contextView, R.string.text_label, Snackbar.LENGTH_LONG)\n    .setAction(R.string.action_text) {\n        // Responds to click on the action\n    }\n    .show()\n```\n\n### Anchoring a snackbar\n\nBy default, `Snackbar`s will be anchored to the bottom edge of their parent\nview. However, you can use the `setAnchorView` method to make a `Snackbar`\nappear above a specific view within your layout, e.g. a `FloatingActionButton`.\n\n```kt\nSnackbar.make(...)\n    .setAnchorView(fab)\n    ...\n```\n\nThis is especially helpful if you would like to place a `Snackbar` above\nnavigational elements at the bottom of the screen, such as a `BottomAppBar` or\n`BottomNavigationView`.\n\n### Related concepts\n\nTemporary bottom bars with other sorts of content layouts can be implemented by\nsubclassing\n[BaseTransientBottomBar](https://developer.android.com/reference/com/google/android/material/snackbar/BaseTransientBottomBar).\n\nAndroid also provides a\n[Toast](https://developer.android.com/reference/android/widget/Toast.html) class\nwith a similar API that can be used for displaying system-level notifications.\nGenerally, snackbars are the preferred mechanism for displaying feedback\nmessages to users, as they can be displayed in the context of the UI where the\naction occurred. Reserve `Toast` for cases where this cannot be done.\n\n## Snackbar\n\nSnackbars inform users of a process that an app has performed or will perform.\nThey appear temporarily, towards the bottom of the screen. They shouldn’t\ninterrupt the user experience, and they don’t require user input to disappear.\nThey disappear either after a timeout or after a user interaction elsewhere on\nthe screen, but can also be swiped off the screen.\n\nSnackbars can also offer the ability to perform an action, such as undoing an\naction that was just taken, or retrying an action that had failed.\n\n### Snackbars example\n\nAPI and source code:\n\n*   `Snackbar`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/snackbar/Snackbar)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/snackbar/Snackbar.java)\n\nThe following is an example of a snackbar with an action button:\n\n![Snackbar example with white text label and an action button with purple text](assets/snackbar/snackbar_example.png)\n\nIn code:\n\n```kt\nSnackbar.make(contextView, "Text label", Snackbar.LENGTH_LONG)\n    .setAction("Action") {\n        // Responds to click on the action\n    }\n    .show()\n```\n\n## Anatomy and key properties\n\nThe following is an anatomy diagram of a snackbar:\n\n![Snackbar anatomy diagram](assets/snackbar/snackbar_anatomy.png)\n\n1.  Text label\n1.  Container\n1.  Action (optional)\n\n### Text label attributes\n\nElement              | Attribute                | Related method(s) | Default value\n-------------------- | ------------------------ | ----------------- | -------------\n**Text label style** | N/A                      | N/A               | `?attr/snackbarTextViewStyle`\n**Text label**       | `android:text`           | `setText`         | `null`\n**Color**            | `android:textColor`      | `setTextColor`    | `?attr/colorSurface`\n**Typography**       | `android:textAppearance` | N/A               | `?attr/textAppearanceBody2`\n\n### Container attributes\n\nElement                 | Attribute                         | Related method(s)                               | Default value\n----------------------- | --------------------------------- | ----------------------------------------------- | -------------\n**Color**               | `app:backgroundTint`              | `setBackgroundTint`<br/>`setBackgroundTintList` | `?attr/colorSurface` at 80% over `?attr/colorOnSurface`\n**Color overlay alpha** | `app:backgroundOverlayColorAlpha` | N/A                                             | `0.8f` (ignored if `app:backgroundTint` is set)\n**Margin**              | `android:layout_margin`           | N/A                                             | `8dp`\n**Elevation**           | `app:elevation`                   | N/A                                             | `6dp`\n**Animation mode**      | `app:animationMode`               | `setAnimationMode`<br/>`getAnimationMode`       | `fade`\n\n### Action attributes\n\nElement              | Attribute                  | Related method(s)    | Default value\n-------------------- | -------------------------- | -------------------- | -------------\n**Button style**     | N/A                        | N/A                  | `?attr/snackbarButtonStyle`\n**Text color alpha** | `app:actionTextColorAlpha` | N/A                  | `0.5f`\n**Text Color**       | `android:textColor`        | `setTextActionColor` | `?attr/colorPrimary`\n\n### Styles\n\nElement                 | **Theme attribute**           | **Default value**\n----------------------- | ----------------------------- | -----------------\n**Default style**       | `?attr/snackbarStyle`         | `@style/Widget.MaterialComponents.Snackbar`\n**Action button style** | `?attr/snackbarButtonStyle`   | `@style/Widget.MaterialComponents.Button.TextButton.Snackbar`\n**Text label style**    | `?attr/snackbarTextViewStyle` | `@style/Widget.MaterialComponents.Snackbar.TextView`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/snackbar/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/snackbar/res/values/attrs.xml).\n\n## Theming snackbars\n\nSnackbars support\n[Material Theming](https://material.io/design/material-theming/overview.html#using-material-theming)\nand can be customized in terms of color and typography.\n\n### Snackbar theming example\n\nAPI and source code:\n\n*   `Snackbar`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/snackbar/Snackbar)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/snackbar/Snackbar.java)\n\nThe following is an example of a snackbar with an action button that uses the\nMaterial.io [Shrine](https://material.io/design/material-studies/shrine.html)\ncolor theming:\n\n!["Snackbar with brown container, pink text, and pink \'Action\' text button on\nlight grey screen"](assets/snackbar/snackbar_theming.png)\n\n#### Implementing snackbar theming\n\nUsing theme attributes in `res/values/styles.xml` (themes all snackbars and\naffects other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n</style>\n\n```\n\nor using default style theme attributes, styles and theme overlays (themes all\nsnackbars but does not affect other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="snackbarStyle">@style/Widget.App.Snackbar</item>\n    <item name="snackbarButtonStyle">@style/Widget.App.SnackbarButton</item>\n</style>\n\n<style name="Widget.App.Snackbar" parent="Widget.MaterialComponents.Snackbar">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Snackbar</item>\n    <item name="actionTextColorAlpha">1</item>\n  </style>\n\n<style name="Widget.App.SnackbarButton" parent="Widget.MaterialComponents.Button.TextButton.Snackbar">\n    <item name="android:textColor">@color/shrine_pink_100</item>\n</style>\n\n<style name="ThemeOverlay.App.Snackbar" parent="">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n</style>\n```\n\nor in code (affects only this snackbar):\n\n```kt\nSnackbar.make(contextView, "Text label", Snackbar.LENGTH_LONG)\n    .setAction("Action") {\n        // Responds to click on the action\n    }\n    .setBackgroundTint(resources.getColor(R.color.backgroundTint))\n    .setActionTextColor(resources.getColor(R.color.actionTextColor))\n    .show()\n```\n\nand in `values/colors.xml`:\n\n```xml\n<color name="backgroundTint">@color/shrine_pink_900</color>\n<color name="actionTextColor">@color/shrine_pink_100</color>\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        apiKey="zv034bdme9je7c9d43chzmc2yg"\n        platform="android"\n        storyParams={{"component":"snackbar"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/snackbar.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories/snackbar.stories.jsx"})},917:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__(5),__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(19);__webpack_exports__.default={title:"Switch"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"switch"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Material selection controls: Switches"\nlayout: detail\nsection: components\nexcerpt: "Selection controls allow the user to select options."\niconId: switch\npath: /catalog/switches/\n--\x3e\n\n# Selection controls: switches\n\n[Selection controls](https://material.io/components/selection-controls#usage)\nallow the user to select options.\n\nSwitches toggle the state of a single setting on or off. They are the preferred\nway to adjust settings on mobile.\n\n![White "Settings" menu with purple header and switches to turn on options, such\nas "Wi-fi" and "Bluetooth"](assets/switch/switch_hero.png)\n\n**Contents**\n\n*   [Using switches](#using-switches)\n*   [Switch](#switch)\n*   [Theming switches](#theming-switches)\n\n## Using switches\n\nBefore you can use Material switches, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n_**Note:** The `SwitchMaterial` widget provides a complete implementation of\nMaterial Design\'s switch component. It extends from the support library\'s\n`SwitchCompat` widget, but not from the framework `Switch` widget. As such, it\ndoes not auto-inflate, unlike other selection controls, and must be explicitly\nspecified in layouts._\n\nUse switches to:\n\n*   Toggle a single item on or off, on mobile and tablet\n*   Immediately activate or deactivate something\n\n### Making switches accessible\n\nSwitches support content labeling for accessibility and are readable by most\nscreen readers, such as TalkBack. Text rendered in switches is automatically\nprovided to accessibility services. Additional content labels are usually\nunnecessary.\n\n## Switch\n\nA `Switch` represents a button with two states, on and off. Switches are most\noften used on mobile devices to enable and disable options in an options menu. A\nswitch consists of a track and thumb; the thumb moves along the track to\nindicate its current state.\n\n### Switches example\n\nAPI and source code:\n\n*   `SwitchMaterial`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/switchmaterial/SwitchMaterial)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/switchmaterial/SwitchMaterial.java)\n\nThe following example shows a list of five switches.\n\n![Example of 5 switches, the first one is toggled and the last one is disabled.](assets/switch/switch_example.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.switchmaterial.SwitchMaterial\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:checked="true"\n    android:text="@string/label_1"/>\n<com.google.android.material.switchmaterial.SwitchMaterial\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:text="@string/label_2"/>\n<com.google.android.material.switchmaterial.SwitchMaterial\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:text="@string/label_3"/>\n<com.google.android.material.switchmaterial.SwitchMaterial\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:text="@string/label_4"/>\n<com.google.android.material.switchmaterial.SwitchMaterial\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:enabled="false"\n    android:text="@string/label_5"/>\n```\n\nIn code:\n\n```kt\n// To check a switch\nswitchMaterial.isChecked = true\n\n// To listen for a switch\'s checked/unchecked state changes\nswitchMaterial.setOnCheckedChangeListener { buttonView, isChecked\n    // Responds to switch being checked/unchecked\n}\n```\n\n## Anatomy and key properties\n\nThe following is an anatomy diagram that shows a switch thumb and a switch\ntrack:\n\n![Switch anatomy diagram](assets/switch/switch_anatomy.png)\n\n1.  Thumb\n1.  Track\n\n### Switch attributes\n\nElement                    | Attribute                                  | Related method(s)                                          | Default value\n-------------------------- | ------------------------------------------ | ---------------------------------------------------------- | -------------\n**To use material colors** | `app:useMaterialThemeColors`               | `setUseMaterialThemeColors`<br/>`isUseMaterialThemeColors` | `true` (ignored if specific tint attrs are set)\n**Min size**               | `android:minWidth`<br/>`android:minHeight` | `(set/get)MinWidth`<br/>`(set/get)MinHeight`               | `?attr/minTouchTargetSize`\n\nThe color of the switch defaults to using `?attr/colorSurface`,\n`?attr/colorOnSurface`, and `?attr/colorSecondary` defined in your app theme. If\nyou want to override this behavior, as you might with a custom drawable that\nshould not be tinted, set `app:useMaterialThemeColors` to `false`:\n\n```xml\n<com.google.android.material.switchmaterial.SwitchMaterial\n        ...\n    app:useMaterialThemeColors="false"\n    />\n```\n\n### Thumb attributes\n\nElement       | Attribute       | Related method(s)                         | Default value\n------------- | --------------- | ----------------------------------------- | -------------\n**Thumb**     | `android:thumb` | `setThumbDrawable`<br/>`getThumbDrawable` | inherits from `SwitchCompat`\n**Color**     | `app:thumbTint` | `setThumbTintList`<br/>`getThumbTintList` | `?attr/colorSurface` (unchecked)<br/>`?attr/colorSecondary` (checked)\n**Elevation** | N/A             | N/A                                       | `4dp`\n\n### Track attributes\n\nElement   | Attribute       | Related method(s)                         | Default value\n--------- | --------------- | ----------------------------------------- | -------------\n**Track** | `app:track`     | `setTrackDrawable`<br/>`getTrackDrawable` | inherits from `SwitchCompat`\n**Color** | `app:trackTint` | `setTrackTintList`<br/>`getTrackTintList` | `?attr/colorOnSurface` (unchecked)<br/>`?attr/colorSecondary` (checked)\n\n### Text label attributes\n\nElement        | Attribute                | Related method(s)                  | Default value\n-------------- | ------------------------ | ---------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`            | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColors` | inherits from `SwitchCompat`\n**Typography** | `android:textAppearance` | `setTextAppearance`                | inherits from `SwitchCompat`\n\n### Switch states\n\nSwitches can be on or off. Switches have enabled, hover, focused, and pressed\nstates.\n\nDisplay the outer radial reaction only on form factors that use touch, where\ninteraction may obstruct the element completely.\n\nFor desktop, the radial reaction isn\'t needed.\n\n![Switch states in an array. Columns are enabled, disabled, hover, focused,\npressed. Rows are on or off](assets/switch/switch_states.png)\n\n### Styles\n\nElement           | Style\n----------------- | -------------------------------------------------\n**Default style** | `Widget.MaterialComponents.CompoundButton.Switch`\n\nDefault style theme attribute: `?attr/switchStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/switchmaterial/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/switchmaterial/res/values/attrs.xml).\n\n## Theming switches\n\nSwitches support\n[Material Theming](https://material.io/components/selection-controls#theming)\nand can be customized in terms of color and typography.\n\n### Switch theming example\n\nAPI and source code:\n\n*   `SwitchMaterial`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/switchmaterial/SwitchMaterial)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/switchmaterial/SwitchMaterial.java)\n\nThe following example shows a list of switches with Material Theming.\n\n!["5 switches with brown text: first switch is on and has pink thumb and track"](assets/switch/switch_theming.png)\n\n#### Implementing switch theming\n\nUsing theme attributes in `res/values/styles.xml` (themes all switches and\naffects other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="colorSecondary">@color/shrine_pink_100</item>\n</style>\n\n```\n\nor using default style theme attributes, styles and theme overlays (themes all\nswitches but does not affect other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="switchStyle">@style/Widget.App.Switch</item>\n</style>\n\n<style name="Widget.App.Switch" parent="Widget.MaterialComponents.CompoundButton.Switch">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Switch</item>\n</style>\n\n<style name="ThemeOverlay.App.Switch" parent="">\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="colorSecondary">@color/shrine_pink_100</item>\n</style>\n```\n\nor using the styles in the layout (affects only this switch):\n\n```xml\n<com.google.android.material.switchmaterial.SwitchMaterial\n        ...\n    style="@style/Widget.App.Switch"\n    />\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        apiKey="zv034bdme9je7c9d43chzmc2yg"\n        platform="android"\n        storyParams={{"component":"switch"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/switch.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories/switch.stories.jsx"})},918:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__(5),__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(19);__webpack_exports__.default={title:"Tabs"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"tabs"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Tabs"\nlayout: detail\nsection: components\nexcerpt: "Android tabs."\niconId: tabs\npath: /catalog/tabs/\n--\x3e\n\n# Tabs\n\n[Tabs](https://material.io/components/tabs/) organize content across different\nscreens, data sets, and other interactions.\n\n![Example travel app with Explore, Flights, and Trips tabs](assets/tabs/tabs-hero.png)\n\n**Contents**\n\n*   [Using tabs](#using-tabs)\n*   [Fixed tabs](#fixed-tabs)\n*   [Scrollable tabs](#scrollable-tabs)\n*   [Theming tabs](#theming-tabs)\n\n## Using tabs\n\nBefore you can use Material tabs, you need to add a dependency to the Material\nComponents for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n### Basic usage\n\n![Three fixed tabs with one tab selected.](assets/tabs/tabs_basic.png)\n\nA\n[`TabLayout`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabLayout.java)\ncan be added to a layout like so:\n\n```xml\n<com.google.android.material.tabs.TabLayout\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content">\n\n    ...\n\n</com.google.android.material.tabs.TabLayout>\n```\n\n[`TabItem`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabItem.java)s\ncan then be added as children of the `TabLayout` and adjusted as needed:\n\n```xml\n<com.google.android.material.tabs.TabLayout\n    ...>\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/text_label_1"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/text_label_2"\n        />\n\n    ...\n\n</com.google.android.material.tabs.TabLayout>\n```\n\nChanges to tab selection can be observed like so:\n\n```kt\ntabLayout.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {\n\n    override fun onTabSelected(tab: TabLayout.Tab?) {\n        // Handle tab select\n    }\n\n    override fun onTabReselected(tab: TabLayout.Tab?) {\n        // Handle tab reselect\n    }\n\n    override fun onTabUnselected(tab: TabLayout.Tab?) {\n        // Handle tab unselect\n    }\n})\n```\n\n### Making tabs accessible\n\nThe Android tab components support screen reader descriptions for tabs and\nbadges . While optional, we strongly encourage their use.\n\n#### Content descriptions\n\nAdding a content description to the entire `TabLayout` can be done in XML with\nthe `android:contentDescription` attribute or programmatically like so:\n\n```kt\ntabLayout.contentDescription = contentDescription\n```\n\nContent descriptions can also be added to individual tabs:\n\n```kt\nval tab = tabLayout.getTabAt(index)\ntab?.contentDescription = contentDescription\n```\n\n`BadgeDrawable` also has a number of content description setters for different\nbadge states:\n\n```kt\nval badge = tab.getOrCreateBadge()\nbadge.setContentDescriptionNumberless(contentDescription)\nbadge.setContentDescriptionQuantityStringsResource(R.string.content_description)\nbadge.setContentDescriptionExceedsMaxBadgeNumberStringResource(R.string.content_description)\n```\n\n### Using tabs with ViewPager\n\nA `TabLayout` can be setup with a\n[`ViewPager`](https://developer.android.com/reference/kotlin/androidx/viewpager/widget/ViewPager)\nin order to:\n\n*   Dynamically create `TabItem`s based on the number of pages, their titles,\n    etc.\n*   Synchronize the selected tab and tab indicator position with page swipes\n\nFirstly, your\n[`PagerAdapter`](https://developer.android.com/reference/androidx/viewpager/widget/PagerAdapter)\n(or subclass) needs to overrride the `getPageTitle` function in order to set the\ntab text label:\n\n```kt\nclass Adapter : PagerAdapter() {\n\n    ...\n\n    override fun getPageTitle(position: Int): CharSequence? {\n        // Return tab text label for position\n    }\n}\n```\n\nAfter the adapter has been set on the `ViewPager`, synchronize the `TabLayout`\nlike so:\n\n```kt\ntabLayout.setupWithViewPager(viewPager)\n```\n\nFurther customization of the dynamically-created `TabItem`s (such as setting\nicons) needs to be done separately:\n\n```kt\nval tab = tabLayout.getTabAt(index)\ntab?.icon = drawable\n```\n\n### Using tabs with ViewPager2\n\nSetting up a `TabLayout` with a\n[`ViewPager2`](https://developer.android.com/reference/androidx/viewpager2/widget/ViewPager2)\nrelies on the same concepts as doing so with a `ViewPager`, but the\nimplementation is different. Everything is handled by the\n[`TabLayoutMediator`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabLayoutMediator.java)\nclass:\n\n```kt\nTabLayoutMediator(tabLayout, viewPager2) { tab, position ->\n    when (position) {\n        0 -> {\n            tab.text = textLabel1\n            tab.icon = drawable1\n        }\n        1 -> {\n            tab.text = textLabel2\n            tab.icon = drawable2\n        }\n        ...\n    }\n}.attach()\n```\n\n### Adding badges to tabs\n\n![Example of 3 fixed tabs with badges: a red dot, a red badge with "1", and a\nred badge with "+999.](assets/tabs/tabs_badged.png)\n\nTabs support badging with the\n[`BadgeDrawable`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/badge/BadgeDrawable.java)\nclass:\n\n```kt\n// Get badge from tab (or create one if none exists)\nval badge = tab.getOrCreateBadge()\n// Customize badge\nbadge.number = number\n// Remove badge from tab\ntab.removeBadge()\n```\n\n### Types\n\nThere are two types of tabs: 1. [Fixed tabs](#fixed-tabs), 2.\n[Scrollable tabs](#scrollable-tabs)\n\n![Composite image: Pets with Dogs, Cats, and Birds tabs; Dog breeds with\nPitbulls, Terrier, Poodle, Labrador (partial)](assets/tabs/tabs-types.png)\n\n## Fixed tabs\n\nFixed tabs display all tabs on one screen, with each tab at a fixed width. The\nwidth of each tab is determined by dividing the number of tabs by the screen\nwidth. They don’t scroll to reveal more tabs; the visible tab set represents the\nonly tabs available.\n\n### Fixed tabs example\n\nAPI and source code:\n\n*   `TabLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabLayout.java)\n*   `TabItem`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabItem)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabItem.java)\n\nThe following example shows a row of fixed tabs.\n\n![Example of 3 fixed tabs.](assets/tabs/tabs_fixed.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.tabs.TabLayout\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    app:tabMode="fixed">\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_1"\n        android:icon="@drawable/ic_favorite_24dp"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_2"\n        android:icon="@drawable/ic_music_24dp"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_3"\n        android:icon="@drawable/ic_search_24dp"\n        />\n\n</com.google.android.material.tabs.TabLayout>\n```\n\n## Scrollable tabs\n\nScrollable tabs are displayed without fixed widths. They are scrollable, such\nthat some tabs will remain off-screen until scrolled.\n\n### Scrollable tabs example\n\nAPI and source code:\n\n*   `TabLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabLayout.java)\n*   `TabItem`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabItem)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabItem.java)\n\nThe following example shows a row of scrollable tabs.\n\n![Example of 4 scrollable tabs.](assets/tabs/tabs_scrollable.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.tabs.TabLayout\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    app:tabMode="scrollable"\n    app:tabContentStart="56dp">\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_1"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_2"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_3"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_4"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_5"\n        />\n\n</com.google.android.material.tabs.TabLayout>\n```\n\n### Anatomy and key properties\n\nTabs have a container and each tab item has an optional icon and text label. Tab\nitems can be in an active or inactive state. The tab indicator is shown below\nthe active tab item.\n\n![Tabs anatomy diagram](assets/tabs/tabs-anatomy.png)\n\n1.  Container\n2.  Active icon (optional if there’s a label)\n3.  Active text label (optional if there’s an icon)\n4.  Active tab indicator\n5.  Inactive icon (optional if there’s a label)\n6.  Inactive text label (optional if there’s an icon)\n7.  Tab item\n\n### Container attributes\n\nElement       | Attribute            | Related method(s)                  | Default value\n------------- | -------------------- | ---------------------------------- | -------------\n**Color**     | `android:background` | `setBackground`<br>`getBackground` | `?attr/colorSurface`\n**Elevation** | `android:elevation`  | `setElevation`                     | `0dp`\n**Height**    | N/A                  | N/A                                | `48dp` (inline text) or `72dp` (non-inline text and icon)\n**Tab mode**  | `tabMode`            | `setTabMode`<br>`getTabMode`       | `fixed`\n\n### Tab item icon attributes\n\nElement   | Attribute      | Related method(s)                                                | Default value\n--------- | -------------- | ---------------------------------------------------------------- | -------------\n**Icon**  | `android:icon` | `setIcon`<br>`getIcon`                                           | `null`\n**Color** | `tabIconTint`  | `setTabIconTint`<br>`setTabIconTintResource`<br>`getTabIconTint` | `colorOnSurface` at 60% opacity and `colorPrimary` (activated) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/color/mtrl_tabs_icon_color_selector.xml))\n\n### Tab item text label attributes\n\nElement          | Attribute           | Related method(s)                                               | Default value\n---------------- | ------------------- | --------------------------------------------------------------- | -------------\n**Text**         | `android:text`      | `setText`<br>`getText`                                          | `null`\n**Color**        | `tabTextColor`      | `setTabTextColors`<br>`getTabTextColors`                        | `colorOnSurface` at 60% opacity and `colorPrimary` (activated) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/color/mtrl_tabs_icon_color_selector.xml))\n**Typography**   | `tabTextAppearance` | N/A                                                             | `?attr/textAppearanceButton`\n**Inline label** | `tabInlineLabel`    | `setInlineLabel`<br>`setInlineLabelResource`<br>`isInlineLabel` | `false`\n\n### Tab item container attributes\n\nElement              | Attribute                                                                                     | Related method(s)                                                            | Default value\n-------------------- | --------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------- | -------------\n**Ripple color**     | `tabRippleColor`                                                                              | `setTabRippleColor`<br>`setTabRippleColorResource`<br>`getTabRippleColor`    | `colorOnSurface` at 8% opacity and `colorPrimary` at 8% opacity (activated) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/color/mtrl_tabs_ripple_color.xml))\n**Unbounded ripple** | `tabUnboundedRipple`                                                                          | `setUnboundedRipple`<br>`setUnboundedRippleResource`<br>`hasUnboundedRipple` | `true`\n**Gravity**          | `tabGravity`                                                                                  | `setTabGravity`<br>`getTabGravity`                                           | `fill`\n**Min width**        | `tabMinWidth`                                                                                 | N/A                                                                          | `72dp` (scrollable) or `wrap_content`\n**Max width**        | `tabMaxWidth`                                                                                 | N/A                                                                          | `264dp`\n**Padding**          | `tabPaddingStart`<br>`tabPaddingEnd`<br>`tabPaddingTop`<br>`tabPaddingBottom`<br>`tabPadding` | N/A                                                                          | `12dp`<br>`12dp`<br>`0dp`<br>`0dp`<br>`0dp`\n\n### Tab indicator attributes\n\nElement                | Attribute                       | Related method(s)                                                | Default value\n---------------------- | ------------------------------- | ---------------------------------------------------------------- | -------------\n**Color**              | `tabIndicatorColor`             | `setSelectedTabIndicatorColor`                                   | `colorPrimary`\n**Drawable**           | `tabIndicator`                  | `setSelectedTabIndicator`<br>`getSelectedTabIndicator`           | [`mtrl_tabs_default_indicator`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/drawable/mtrl_tabs_default_indicator.xml)\n**Height**             | `tabIndicatorHeight`            | `setSelectedTabIndicatorHeight`                                  | `2dp`\n**Full width**         | `tabIndicatorFullWidth`         | `setTabIndicatorFullWidth`<br>`isTabIndicatorFullWidth`          | `true`\n**Animation mode**     | `tabIndicatorAnimationMode`     | `setTabIndicatorAnimationMode`<br>`getTabIndicatorAnimationMode` | `linear`\n**Gravity**            | `tabIndicatorGravity`           | `setSelectedTabIndicatorGravity`<br>`getTabIndicatorGravity`     | `bottom`\n**Animation duration** | `tabIndicatorAnimationDuration` | N/A                                                              | `250`\n\n### Styles\n\nElement                                                                          | Style\n-------------------------------------------------------------------------------- | -----\n**Default style**                                                                | `Widget.MaterialComponents.TabLayout`\n**Primary background color style**                                               | `Widget.MaterialComponents.TabLayout.Colored`\n**Primary (light theme) or surface (dark theme)**<br/>**background color style** | `Widget.MaterialComponents.TabLayout.PrimarySurface`\n\nDefault style theme attribute: `?attr/tabStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/values/attrs.xml).\n\n## Theming tabs\n\nTabs support\n[Material Theming](https://material.io/components/app-bars-bottom/#theming) and\ncan be customized in terms of color and typography.\n\n### Tabs theming example\n\nAPI and source code:\n\n*   `TabLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabLayout.java)\n*   `TabItem`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabItem)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabItem.java)\n\nThe following example shows a row of scrollable tabs with Material Theming.\n\n![Example of 4 scrollable tabs with light pink background. The selected text is\ndark pink, the unselected text is grey.](assets/tabs/tabs_theming.png)\n\n#### Implementing tabs theming\n\nUsing theme attributes and styles in `res/values/styles.xml` (themes all tabs\nand affects other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_900</item>\n    <item name="colorSurface">@color/shrine_pink_light</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="textAppearanceButton">@style/TextAppearance.App.Button</item>\n</style>\n\n<style name="TextAppearance.App.Button" parent="TextAppearance.MaterialComponents.Button">\n    <item name="fontFamily">@font/rubik</item>\n    <item name="android:fontFamily">@font/rubik</item>\n</style>\n```\n\nor using default style theme attributes, styles and theme overlays (themes all\ntabs but does not affect other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="tabStyle">@style/Widget.App.TabLayout</item>\n</style>\n\n<style name="Widget.App.TabLayout" parent="Widget.MaterialComponents.TabLayout">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.TabLayout</item>\n    <item name="tabTextAppearance">@style/TextAppearance.App.Button</item>\n</style>\n\n<style name="ThemeOverlay.App.TabLayout" parent="">\n    <item name="colorPrimary">@color/shrine_pink_900</item>\n    <item name="colorSurface">@color/shrine_pink_light</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n</style>\n```\n\nor using the style in the layout (affects only these tabs):\n\n```xml\n<com.google.android.material.tabs.TabLayout\n    ...\n    style="@style/Widget.App.TabLayout"\n    />\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        apiKey="zv034bdme9je7c9d43chzmc2yg"\n        platform="android"\n        storyParams={{"component":"tabs"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/tabs.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories/tabs.stories.jsx"})},919:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__(5),__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(19);__webpack_exports__.default={title:"Textfield"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"textfield"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Text Fields"\nlayout: detail\nsection: components\nexcerpt: "A text field with an animated floating label and other Material Design features."\niconId: text_field\npath: /catalog/text-fields/\n--\x3e\n\n# Text fields\n\n[Text fields](https://material.io/components/text-fields) let users enter and\nedit text.\n\n!["Text fields on a screen"](assets/textfields/textfields_hero.png)\n\n**Contents**\n\n*   [Using text fields](#using-text-fields)\n*   [Filled text field](#filled-text-field)\n*   [Outlined text field](#outlined-text-field)\n*   [Theming](#theming-text-fields)\n\n## Using text fields\n\nBefore you can use Material text fields, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    android:id="@+id/textField"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:hint="@string/label">\n\n    <com.google.android.material.textfield.TextInputEditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n_**Note:** A text field is composed of a `TextInputLayout` and a\n`TextInputEditText` as a direct child. Using an `EditText` as the child might\nwork, but `TextInputEditText` provides accessibility support for the text field\nand allows `TextInputLayout` greater control over the visual aspects of the\ninput text. If an `EditText` is being used, make sure to set its\n`android:background` to `@null` so that `TextInputLayout` can set the proper\nbackground on it._\n\n### Making text fields accessible\n\nAndroid\'s text field component APIs support both label text and helper text for\ninforming the user as to what information is requested for a text field. While\noptional, their use is strongly encouraged.\n\n#### Content description\n\nWhen using **custom icons**, you should set a content description on them so\nthat screen readers like TalkBack are able to announce their purpose or action,\nif any.\n\nFor the leading icon, that can be achieved via the\n`app:startIconContentDescription` attribute or `setStartIconContentDescription`\nmethod. For the trailing icon, that can be achieved via the\n`app:endIconContentDescription` attribute or `setEndIconContentDescription`\nmethod.\n\nWhen setting an **error message** that contains special characters that screen\nreaders or other accessibility systems are not able to read, you should set a\ncontent description via the `app:errorContentDescription` attribute or\n`setErrorContentDescription` method. That way, when the error needs to be\nannounced, it will announce the content description instead.\n\n#### Custom `EditText`\n\nIf you are using a custom `EditText` as `TextInputLayout`\'s child and your text\nfield requires different accessibility support than the one offered by\n`TextInputLayout`, you can set a `TextInputLayout.AccessibilityDelegate` via the\n`setTextInputAccessibilityDelegate` method. This method should be used in place\nof providing an `AccessibilityDelegate` directly on the `EditText`.\n\n### Adding a leading icon to a text field\n\n!["Text field with a leading icon."](assets/textfields/textfields_leading_icon.png)\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:startIconDrawable="@drawable/ic_favorite_24dp"\n    app:startIconContentDescription="@string/content_description_end_icon">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n### Adding a trailing icon to a text field\n\n**Password toggle:**\n\n!["Text field with a password toggle trailing icon."](assets/textfields/textfields_trailing_icon_password_toggle.png)\n\nIf set, an icon is displayed to toggle between the password being displayed as\nplain-text or disguised (when the `TextInputEditText` is set to display a\npassword).\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:endIconMode="password_toggle">\n\n    <com.google.android.material.textfield.TextInputEditText\n        ...\n        android:inputType="textPassword"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n**Clear text:**\n\n!["Text field with a clear text trailing icon."](assets/textfields/textfields_trailing_icon_clear_text.png)\n\nIf set, an icon is displayed when text is present and pressing it clears the\ninput text.\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:endIconMode="clear_text">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n**Custom icon:**\n\n!["Text field with a custom trailing icon."](assets/textfields/textfields_trailing_icon_custom.png)\n\nIt is possible to set a custom `Drawable` as the text field\'s trailing icon via\n`app:endIconMode="custom"`. You should specify a drawable and content\ndescription for the icon, and, optionally, specify custom behaviors.\n\nIn the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:endIconMode="custom"\n    app:endIconDrawable="@drawable/ic_check_circle_24dp"\n    app:endIconContentDescription="@string/content_description_end_icon">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nOptionally, in code:\n\n```kt\ntextField.setEndIconOnClickListener {\n  // Respond to end icon presses\n}\n\ntextField.addOnEditTextAttachedListener {\n  // If any specific changes should be done when the edit text is attached (and\n  // thus when the trailing icon is added to it), set an\n  // OnEditTextAttachedListener.\n\n  // Example: The clear text icon\'s visibility behavior depends on whether the\n  // EditText has input present. Therefore, an OnEditTextAttachedListener is set\n  // so things like editText.getText() can be called.\n}\n\ntextField.addOnEndIconChangedListener {\n  // If any specific changes should be done if/when the endIconMode gets\n  // changed, set an OnEndIconChangedListener.\n\n  // Example: If the password toggle icon is set and a different EndIconMode\n  // gets set, the TextInputLayout has to make sure that the edit text\'s\n  // TransformationMethod is still PasswordTransformationMethod. Because of\n  // that, an OnEndIconChangedListener is used.\n}\n```\n\n_**Note:** You should opt to use the `EndIconMode` API instead of setting an\nend/right compound `Drawable` on the `TextInputEditText`. The same applies to\nthe now-deprecated `passwordToggle*` attributes._\n\nSee the full list of\n[end icon modes](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/attrs.xml#L149).\n\n### Implementing an exposed dropdown menu\n\n!["Text field with an exposed dropdown menu."](assets/textfields/textfields_exposed_dropdown_menu.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    style="@style/Widget.MaterialComponents.TextInputLayout.*.ExposedDropdownMenu">\n\n    <AutoCompleteTextView\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:inputType="none"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nIn code:\n\n```kt\nval items = listOf("Material", "Design", "Components", "Android")\nval adapter = ArrayAdapter(requireContext(), R.layout.list_item, items)\n(textField.editText as? AutoCompleteTextView)?.setAdapter(adapter)\n```\n\nIn the item layout (`list_item.xml`):\n\n```xml\n<TextView\n    xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:padding="16dp"\n    android:ellipsize="end"\n    android:maxLines="1"\n    android:textAppearance="?attr/textAppearanceSubtitle1"\n/>\n```\n\n### Adding helper text to a text field\n\n!["Text field with helper text."](assets/textfields/textfields_helper_text.png)\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:helperTextEnabled="true"\n    app:helperText="@string/helper_text">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n### Adding a counter to a text field\n\n!["Text field with a counter."](assets/textfields/textfields_counter.png)\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:counterEnabled="true"\n    app:counterMaxLength="20">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n### Adding errors to a text field\n\n!["Text field with an error."](assets/textfields/textfields_error.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:errorEnabled="true">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nIn code:\n\n```kt\n// Set error text\npasswordLayout.error = getString(R.string.error)\n\n// Clear error text\npasswordLayout.error = null\n```\n\n_**Note:** Non-null error text will replace any existing helper text, and\nnon-null helper text will replace any existing error text._\n\n### Adding a prefix/suffix to a text field\n\n!["Text field with a prefix/suffix."](assets/textfields/textfields_prefix_suffix.png)\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:prefixText="@string/prefix"\n    app:suffixText="@string/suffix">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n### Text field dimensions\n\nThe recommended default `android:layout_width` is `245dp`.\n\nBy default, text fields have a maximum width of `488dp`, and a minimum width of\n`56dp` for layouts without a label. If a label is present, the minimum width\nrecommended is `88dp`. `android:minWidth` and `android:maxWidth` should be set\non the `TextInputLayout` instead of on the `TextInputEditText` to avoid\nunintended behaviors.\n\nYou can override those values in a custom style that inherits from a\n`TextInputLayout` style or directly on the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    android:id="@+id/textField"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:minWidth="@dimen/custom_min_width"\n    android:maxWidth="@dimen/custom_max_width"\n    android:hint="@string/label">\n\n    <com.google.android.material.textfield.TextInputEditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n_**Note:** The `android:layout_width` of the `TextInputLayout` should be\n`wrap_content` in order for those minimum and maximum dimensions to be used._\n\n### Using text fields programmatically\n\nIf you construct the `TextInputEditText` child of a `TextInputLayout`\nprogrammatically, you should use `TextInputLayout`\'s context to create the view.\nThis will allow `TextInputLayout` to pass along the appropriate styling to the\nedit text.\n\n```kt\nval textInputLayout = TextInputLayout(context)\nval editText = TextInputEditText(textInputLayout.context)\n```\n\n### Types\n\nThere are two types of text fields: 1. [Filled text field](#filled-text-field),\n2. [Outlined text field](#outlined-text-field)\n\n!["Text field types. Fixed: grey back, dark gray indicator turns purple.\nOutlined: clear back, gray outline turns\npurple"](assets/textfields/text-field-generic.png)\n\n## Filled text field\n\n[Filled text fields](https://material.io/components/text-fields/#filled-text-field)\nhave more visual emphasis than outlined text fields, making them stand out when\nsurrounded by other content and components.\n\n_**Note:** The filled text field is the default style if the style is not set._\n\n### Filled text field examples\n\nAPI and source code:\n\n*   `TextInputLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputLayout.java)\n*   `TextInputEditText`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputEditText)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputEditText.java)\n\nThe following examples shows a filled text field with a label.\n\n![Filled text field](assets/textfields/textfields_filled.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    android:id="@+id/filledTextField"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:hint="@string/label">\n\n    <com.google.android.material.textfield.TextInputEditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nIn code:\n\n```kt\n// Get input text\nval inputText = filledTextField.editText?.text.toString()\n\nfilledTextField.editText?.doOnTextChanged { inputText, _, _, _ ->\n    // Respond to input text change\n}\n```\n\nSee the [using text fields](#using-text-fields) section above for more examples.\n\n### Anatomy and key properties\n\nA filled text field has a filled container, input text, a label, an activation\nindicator, optional helper/error text and optional leading/trailing icons.\n\n![Filled text field anatomy](assets/textfields/textfields_filled_anatomy.png)\n\n1.  Container\n2.  Leading icon\n3.  Label\n4.  Input text\n5.  Trailing icon\n6.  Activation indicator\n7.  Helper/error/counter text\n8.  Prefix/suffix/placeholder (not shown)\n\n_**Note:** All the attributes on the tables below should be set on the\n`TextInputLayout`, with the exception of the input text attributes (which should\nbe set on the `TextInputEditText`)._\n\n#### Container attributes\n\nElement                | Attribute                | Related method(s)                                                                       | Default value\n---------------------- | ------------------------ | --------------------------------------------------------------------------------------- | -------------\n**Color**              | `app:boxBackgroundColor` | `setBoxBackgroundColor`<br/>`setBoxBackgroundColorResource`<br/>`getBoxBackgroundColor` | `?attr/colorOnSurface` at 12% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_filled_background_color.xml))\n**Shape**              | `app:shapeAppearance`    | N/A                                                                                     | `?attr/shapeAppearanceSmallComponent`\n**Text field enabled** | `android:enabled`        | `setEnabled`                                                                            | `true`\n\n#### Leading icon attributes\n\nElement                 | Attribute                         | Related method(s)                                                     | Default value\n----------------------- | --------------------------------- | --------------------------------------------------------------------- | -------------\n**Icon**                | `app:startIconDrawable`           | `setStartIconDrawable`<br/>`getStartIconDrawable`                     | `null`\n**Content description** | `app:startIconContentDescription` | `setStartIconContentDescription`<br/>`getStartIconContentDescription` | `null`\n**Color**               | `app:startIconTint`               | `setStartIconTintList`                                                | `colorOnSurface` at 54% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_filled_icon_tint.xml))\n**Checkable**           | `app:startIconCheckable`          | `setStartIconCheckable`<br/>`isStartIconCheckable`                    | `false`\n\n#### Label attributes\n\nElement                        | Attribute                  | Related method(s)                                       | Default value\n------------------------------ | -------------------------- | ------------------------------------------------------- | -------------\n**Text**                       | `android:hint`             | `setHint`<br/>`getHint`                                 | `null`\n**Color**                      | `android:textColorHint`    | `setDefaultHintTextColor`<br/>`getDefaultHintTextColor` | `?attr/colorOnSurface` at 60% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_indicator_text_color.xml))\n**Collapsed (floating) color** | `app:hintTextColor`        | `setHintTextColor`<br/>`getHintTextColor`               | `?attr/colorPrimary`\n**Typography**                 | `app:hintTextAppearance`   | `setHintTextAppearance`                                 | `?attr/textAppearanceCaption`\n**Animation**                  | `app:hintAnimationEnabled` | `setHintAnimationEnabled`<br/>`isHintAnimationEnabled`  | `true`\n**Expanded enabled**           | `app:expandedHintEnabled`  | `setExpandedHintEnabled`<br/>`isExpandedHintEnabled`    | `true`\n\n**Note:** The `android:hint` should always be set on the `TextInputLayout`\ninstead of on the `EditText` in order to avoid unintended behaviors.\n\n#### Input text attributes\n\nElement              | Attribute                                                           | Related method(s)                                            | Default value\n-------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------ | -------------\n**Input text**       | `android:text`                                                      | `setText`<br/>`getText`                                      | `@null`\n**Typography**       | `android:textAppearance`                                            | `setTextAppearance`                                          | `?attr/textAppearanceSubtitle1`\n**Input text color** | `android:textColor`                                                 | `setTextColor`<br/>`getTextColors`<br/>`getCurrentTextColor` | `?android:textColorPrimary`\n**Cursor color**     | N/A (color comes from the theme attr `?attr/colorControlActivated`) | N/A                                                          | `?attr/colorPrimary`\n\n_**Note:** The input text attributes should be set on the `TextInputEditText`._\n\n#### Trailing icon attributes\n\nElement                             | Attribute                       | Related method(s)                                                 | Default value\n----------------------------------- | ------------------------------- | ----------------------------------------------------------------- | -------------\n**Mode**                            | `app:endIconMode`               | `setEndIconMode`<br/>`getEndIconMode`                             | `END_ICON_NONE`\n**Color**                           | `app:endIconTint`               | `setEndIconTintList`                                              | `colorOnSurface` at 54% opacity and `colorPrimary` (activated) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_filled_icon_tint.xml))\n**Custom icon**                     | `app:endIconDrawable`           | `setEndIconDrawable`<br/>`getEndIconDrawable`                     | `null`\n**Custom icon content description** | `app:endIconContentDescription` | `setEndIconContentDescription`<br/>`getEndIconContentDescription` | `null`\n**Custom icon checkable**           | `app:endIconCheckable`          | `setEndIconCheckable`<br/>`isEndIconCheckable`                    | `true`\n**Error icon**                      | `app:errorIconDrawable`         | `setErrorIconDrawable`<br/>`getErrorIconDrawable`                 | [`@drawable/mtrl_ic_error`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/drawable/mtrl_ic_error.xml)\n**Error icon color**                | `app:errorIconTint`             | `setErrorIconTintList`                                            | `?attr/colorError` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_error.xml))\n\n#### Activation indicator attributes\n\nElement           | Attribute                   | Related method(s)                                                            | Default value\n----------------- | --------------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**         | `app:boxStrokeColor`        | `setBoxStrokeColor`<br/>`setBoxStrokeColorStateList`<br/>`getBoxStrokeColor` | `?attr/colorOnSurface` at 42% opacity and `?attr/colorPrimary` (focused) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_filled_stroke_color.xml))\n**Error color**   | `app:boxStrokeErrorColor`   | `setBoxStrokeErrorColor`<br/>`getBoxStrokeErrorColor`                        | `?attr/colorError` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_error.xml))\n**Width**         | `app:boxStrokeWidth`        | N/A                                                                          | `1dp`\n**Focused width** | `app:boxStrokeWidthFocused` | N/A                                                                          | `2dp`\n\n#### Helper/error/counter text attributes\n\nElement                     | Attribute                                                           | Related method(s)                                                                                                   | Default value\n--------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | -------------\n**Helper text enabled**     | `app:helperTextEnabled`                                             | `setHelperTextEnabled`<br/>`isHelperTextEnabled`                                                                    | `false`\n**Helper text**             | `app:helperText`                                                    | `setHelperText`<br/>`getHelperText`                                                                                 | `null`\n**Helper text color**       | `app:helperTextColor`                                               | `setHelperTextColor`<br/>`getHelperTextColor`                                                                       | `?attr/colorOnSurface` at 60% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_indicator_text_color.xml))\n**Helper text typography**  | `app:helperTextAppearance`                                          | `setHelperTextAppearance`                                                                                           | `?attr/textAppearanceCaption`\n**Error text enabled**      | `app:errorEnabled`                                                  | `setErrorEnabled`<br/>`isErrorEnabled`                                                                              | `false`\n**Error text**              | N/A                                                                 | `setError`<br/>`getError`                                                                                           | `null`\n**Error text color**        | `app:errorTextColor`                                                | `setErrorTextColor`<br/>`getErrorCurrentTextColors`                                                                 | `?attr/colorError` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_error.xml)\n**Error text typography**   | `app:errorTextAppearance`                                           | `setErrorTextAppearance`                                                                                            | `?attr/textAppearanceCaption`\n**Counter text enabled**    | `app:counterEnabled`                                                | `setCounterEnabled`<br/>`isCounterEnabled`                                                                          | `false`\n**Counter text length**     | `app:counterMaxLength`                                              | `setCounterMaxLength`<br/>`getCounterMaxLength`                                                                     | `-1`\n**Counter text typography** | `app:counterTextAppearance`<br/>`app:counterOverflowTextAppearance` | `setCounterTextAppearance`<br/>`setCounterOverflowTextAppearance`                                                   | `?attr/textAppearanceCaption`\n**Counter text color**      | `app:counterTextColor`<br/>`app:counterOverflowTextColor`           | `setCounterTextColor`<br/>`setCounterOverflowTextColor`<br/>`getCounterTextColor`<br/>`getCounterOverflowTextColor` | `?attr/colorOnSurface` at 60% (`app:counterTextColor`) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_indicator_text_color.xml))<br/>`?attr/colorError` (`app:counterOverflowTextColor`) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_error.xml)\n\n#### Prefix/suffix attributes\n\nElement               | Attribute                  | Related method(s)                             | Default value\n--------------------- | -------------------------- | --------------------------------------------- | -------------\n**Prefix**            | `app:prefixText`           | `setPrefixText`<br/>`getPrefixText`           | `null`\n**Prefix color**      | `app:prefixTextColor`      | `setPrefixTextColor`<br/>`getPrefixTextColor` | `?attr/colorOnSurface` at 60% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_indicator_text_color.xml))\n**Prefix typography** | `app:prefixTextAppearance` | `setPrefixTextAppearance`                     | `?attr/textAppearanceSubtitle1`\n**Suffix**            | `app:suffixText`           | `setSuffixText`<br/>`getSuffixText`           | `null`\n**Suffix color**      | `app:suffixTextColor`      | `setSuffixTextColor`<br/>`getSuffixTextColor` | `?attr/colorOnSurface` at 60% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_indicator_text_color.xml))\n**Suffix typography** | `app:suffixTextAppearance` | `setSuffixTextAppearance`                     | `?attr/textAppearanceSubtitle1`\n\n#### Styles\n\nElement                               | Style\n------------------------------------- | -----\n**Default style**                     | `Widget.MaterialComponents.TextInputLayout.FilledBox`\n**Dense style**                       | `Widget.MaterialComponents.TextInputLayout.FilledBox.Dense`\n**Exposed dropdown menu style**       | `Widget.MaterialComponents.TextInputLayout.FilledBox.ExposedDropdownMenu`\n**Dense exposed dropdown menu style** | `Widget.MaterialComponents.TextInputLayout.FilledBox.Dense.ExposedDropdownMenu`\n\nDefault style theme attribute: `?attr/textInputStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/attrs.xml).\n\n## Outlined text field\n\n[Outlined text fields](https://material.io/components/text-fields/#outlined-text-field)\nhave less visual emphasis than filled text fields. When they appear in places\nlike forms, where many text fields are placed together, their reduced emphasis\nhelps simplify the layout.\n\n### Outlined text field examples\n\nAPI and source code:\n\n*   `TextInputLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputLayout.java)\n*   `TextInputEditText`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputEditText)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputEditText.java)\n\nThe following examples shows an outlined text field.\n\n![Outlined text field](assets/textfields/textfields_outlined.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    android:id="@+id/outlinedTextField"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:hint="@string/label"\n    style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox">\n\n    <com.google.android.material.textfield.TextInputEditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nIn code:\n\n```kt\n// Get input text\nval inputText = outlinedTextField.editText?.text.toString()\n\noutlinedTextField.editText?.doOnTextChanged { inputText, _, _, _ ->\n    // Respond to input text change\n}\n```\n\nSee the [using text fields](#using-text-fields) section above for more examples.\n\n### Anatomy and key properties\n\nAn outlined text field has a stroked container, input text, a label, optional\nhelper/error text and optional leading/trailing icons.\n\n![Outlined text field anatomy](assets/textfields/textfields_outlined_anatomy.png)\n\n1.  Container\n2.  Leading icon\n3.  Label\n4.  Input text\n5.  Trailing icon\n6.  Helper/error/counter text\n7.  Prefix/suffix/placeholder (not shown)\n\n_**Note:** All the attributes on the tables below should be set on the\n`TextInputLayout`, with the exception of the input text attributes (which should\nbe set on the `TextInputEditText`)._\n\n#### Container attributes\n\nElement                  | Attribute                   | Related method(s)                                                            | Default value\n------------------------ | --------------------------- | ---------------------------------------------------------------------------- | -------------\n**Stroke color**         | `app:boxStrokeColor`        | `setBoxStrokeColor`<br/>`setBoxStrokeColorStateList`<br/>`getBoxStrokeColor` | `?attr/colorOnSurface` at 38% opacity and `?attr/colorPrimary` (focused) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_outlined_stroke_color.xml))\n**Stroke error color**   | `app:boxStrokeErrorColor`   | `setBoxStrokeErrorColor`<br/>`getBoxStrokeErrorColor`                        | `?attr/colorError` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_error.xml))\n**Stroke width**         | `app:boxStrokeWidth`        | N/A                                                                          | `1dp`\n**Stroke focused width** | `app:boxStrokeWidthFocused` | N/A                                                                          | `2dp`\n**Shape**                | `app:shapeAppearance`       | N/A                                                                          | `?attr/shapeAppearanceSmallComponent`\n**Text field enabled**   | `android:enabled`           | `setEnabled`                                                                 | `true`\n\n#### Leading icon attributes\n\nElement                 | Attribute                         | Related method(s)                                                     | Default value\n----------------------- | --------------------------------- | --------------------------------------------------------------------- | -------------\n**Icon**                | `app:startIconDrawable`           | `setStartIconDrawable`<br/>`getStartIconDrawable`                     | `null`\n**Content description** | `app:startIconContentDescription` | `setStartIconContentDescription`<br/>`getStartIconContentDescription` | `null`\n**Color**               | `app:startIconTint`               | `setStartIconTintList`                                                | `colorOnSurface` at 60% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_outlined_icon_tint.xml))\n**Checkable**           | `app:startIconCheckable`          | `setStartIconCheckable`<br/>`isStartIconCheckable`                    | `false`\n\n#### Label attributes\n\nElement                        | Attribute                | Related method(s)                                       | Default value\n------------------------------ | ------------------------ | ------------------------------------------------------- | -------------\n**Text**                       | `android:hint`           | `setHint`<br/>`getHint`                                 | `null`\n**Color**                      | `android:textColorHint`  | `setDefaultHintTextColor`<br/>`getDefaultHintTextColor` | `?attr/colorOnSurface` at 60% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_indicator_text_color.xml))\n**Collapsed (floating) color** | `app:hintTextColor`      | `setHintTextColor`<br/>`getHintTextColor`               | `?attr/colorPrimary`\n**Typography**                 | `app:hintTextAppearance` | `setHintTextAppearance`                                 | `?attr/textAppearanceCaption`\n\n**Note:** The `android:hint` should always be set on the `TextInputLayout`\ninstead of on the `EditText` in order to avoid unintended behaviors.\n\n#### Input text attributes\n\nElement              | Attribute                                                           | Related method(s)                                            | Default value\n-------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------ | -------------\n**Input text**       | `android:text`                                                      | `setText`<br/>`getText`                                      | `@null`\n**Typography**       | `android:textAppearance`                                            | `setTextAppearance`                                          | `?attr/textAppearanceSubtitle1`\n**Input text color** | `android:textColor`                                                 | `setTextColor`<br/>`getTextColors`<br/>`getCurrentTextColor` | `?android:textColorPrimary`\n**Cursor color**     | N/A (color comes from the theme attr `?attr/colorControlActivated`) | N/A                                                          | `?attr/colorPrimary`\n\n_**Note:** The input text attributes should be set on the `TextInputEditText`._\n\n#### Trailing icon attributes\n\nElement                             | Attribute                       | Related method(s)                                                 | Default value\n----------------------------------- | ------------------------------- | ----------------------------------------------------------------- | -------------\n**Mode**                            | `app:endIconMode`               | `setEndIconMode`<br/>`getEndIconMode`                             | `END_ICON_NONE`\n**Color**                           | `app:endIconTint`               | `setEndIconTintList`                                              | `colorOnSurface` at 60% opacity and `colorPrimary` (activated) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_outlined_icon_tint.xml))\n**Custom icon**                     | `app:endIconDrawable`           | `setEndIconDrawable`<br/>`getEndIconDrawable`                     | `null`\n**Custom icon content description** | `app:endIconContentDescription` | `setEndIconContentDescription`<br/>`getEndIconContentDescription` | `null`\n**Custom icon checkable**           | `app:endIconCheckable`          | `setEndIconCheckable`<br/>`isEndIconCheckable`                    | `true`\n**Error icon**                      | `app:errorIconDrawable`         | `setErrorIconDrawable`<br/>`getErrorIconDrawable`                 | [`@drawable/mtrl_ic_error`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/drawable/mtrl_ic_error.xml)\n**Error icon color**                | `app:errorIconTint`             | `setErrorIconTintList`                                            | `?attr/colorError` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_error.xml))\n\n#### Helper/error/counter text attributes\n\nElement                     | Attribute                                                           | Related method(s)                                                                                                   | Default value\n--------------------------- | ------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | -------------\n**Helper text enabled**     | `app:helperTextEnabled`                                             | `setHelperTextEnabled`<br/>`isHelperTextEnabled`                                                                    | `false`\n**Helper text**             | `app:helperText`                                                    | `setHelperText`<br/>`getHelperText`                                                                                 | `null`\n**Helper text color**       | `app:helperTextColor`                                               | `setHelperTextColor`<br/>`getHelperTextColor`                                                                       | `?attr/colorOnSurface` at 60% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_indicator_text_color.xml))\n**Helper text typography**  | `app:helperTextAppearance`                                          | `setHelperTextAppearance`                                                                                           | `?attr/textAppearanceCaption`\n**Error text enabled**      | `app:errorEnabled`                                                  | `setErrorEnabled`<br/>`isErrorEnabled`                                                                              | `false`\n**Error text**              | N/A                                                                 | `setError`<br/>`getError`                                                                                           | `null`\n**Error text color**        | `app:errorTextColor`                                                | `setErrorTextColor`<br/>`getErrorCurrentTextColors`                                                                 | `?attr/colorError` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_error.xml)\n**Error text typography**   | `app:errorTextAppearance`                                           | `setErrorTextAppearance`                                                                                            | `?attr/textAppearanceCaption`\n**Counter text enabled**    | `app:counterEnabled`                                                | `setCounterEnabled`<br/>`isCounterEnabled`                                                                          | `false`\n**Counter text length**     | `app:counterMaxLength`                                              | `setCounterMaxLength`<br/>`getCounterMaxLength`                                                                     | `-1`\n**Counter text typography** | `app:counterTextAppearance`<br/>`app:counterOverflowTextAppearance` | `setCounterTextAppearance`<br/>`setCounterOverflowTextAppearance`                                                   | `?attr/textAppearanceCaption`\n**Counter text color**      | `app:counterTextColor`<br/>`app:counterOverflowTextColor`           | `setCounterTextColor`<br/>`setCounterOverflowTextColor`<br/>`getCounterTextColor`<br/>`getCounterOverflowTextColor` | `?attr/colorOnSurface` at 60% (`app:counterTextColor`) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_indicator_text_color.xml))<br/>`?attr/colorError` (`app:counterOverflowTextColor`) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_error.xml))\n\n#### Prefix/suffix attributes\n\nElement               | Attribute                  | Related method(s)                             | Default value\n--------------------- | -------------------------- | --------------------------------------------- | -------------\n**Prefix**            | `app:prefixText`           | `setPrefixText`<br/>`getPrefixText`           | `null`\n**Prefix color**      | `app:prefixTextColor`      | `setPrefixTextColor`<br/>`getPrefixTextColor` | `?attr/colorOnSurface` at 60% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_indicator_text_color.xml))\n**Prefix typography** | `app:prefixTextAppearance` | `setPrefixTextAppearance`                     | `?attr/textAppearanceSubtitle1`\n**Suffix**            | `app:suffixText`           | `setSuffixText`<br/>`getSuffixText`           | `null`\n**Suffix color**      | `app:suffixTextColor`      | `setSuffixTextColor`<br/>`getSuffixTextColor` | `?attr/colorOnSurface` at 60% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/mtrl_indicator_text_color.xml))\n**Suffix typography** | `app:suffixTextAppearance` | `setSuffixTextAppearance`                     | `?attr/textAppearanceSubtitle1`\n\n#### Styles\n\nElement                               | Style\n------------------------------------- | -----\n**Default style**                     | `Widget.MaterialComponents.TextInputLayout.OutlinedBox`\n**Dense style**                       | `Widget.MaterialComponents.TextInputLayout.OutlinedBox.Dense`\n**Exposed dropdown menu style**       | `Widget.MaterialComponents.TextInputLayout.OutlinedBox.ExposedDropdownMenu`\n**Dense exposed dropdown menu style** | `Widget.MaterialComponents.TextInputLayout.OutlinedBox.Dense.ExposedDropdownMenu`\n\nDefault style theme attribute: `?attr/textInputStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/attrs.xml).\n\n## Theming text fields\n\nText fields support\n[Material Theming](https://material.io/components/text-fields/#theming) and can\nbe customized in terms of color, typography and shape.\n\n### Text field theming example\n\nAPI and source code:\n\n*   `TextInputLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputLayout.java)\n*   `TextInputEditText`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputEditText)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputEditText.java)\n\nThe following example shows filled and outlined text field types with Material\nTheming.\n\n!["Filled and outlined text field theming with pink and brown colors and cut\ncorners"](assets/textfields/textfields_theming.png)\n\n#### Implementing text field theming\n\nUsing theme attributes and styles in `res/values/styles.xml` (themes all text\nfields and affects other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="colorError">@color/shrine_red</item>\n    <item name="textAppearanceSubtitle1">@style/TextAppearance.App.Subtitle1</item>\n    <item name="textAppearanceCaption">@style/TextAppearance.App.Caption</item>\n    <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="TextAppearance.App.Subtitle1" parent="TextAppearance.MaterialComponents.Subtitle1">\n    <item name="fontFamily">@font/rubik</item>\n    <item name="android:fontFamily">@font/rubik</item>\n</style>\n\n<style name="TextAppearance.App.Caption" parent="TextAppearance.MaterialComponents.Caption">\n    <item name="fontFamily">@font/rubik</item>\n    <item name="android:fontFamily">@font/rubik</item>\n</style>\n\n<style name="ShapeAppearance.App.SmallComponent" parent="ShapeAppearance.MaterialComponents.SmallComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">4dp</item>\n</style>\n```\n\nor using default style theme attributes, styles and theme overlays (themes all\ntext fields but does not affect other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="textInputStyle">@style/Widget.App.TextInputLayout</item>\n</style>\n\n<style name="Widget.App.TextInputLayout" parent="Widget.MaterialComponents.TextInputLayout.*">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.TextInputLayout</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n    <item name="hintTextColor">?attr/colorOnSurface</item>\n</style>\n\n<style name="ThemeOverlay.App.TextInputLayout" parent="">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="colorError">@color/shrine_red</item>\n    <item name="textAppearanceSubtitle1">@style/TextAppearance.App.Subtitle1</item>\n    <item name="textAppearanceCaption">@style/TextAppearance.App.Caption</item>\n    <item name="editTextStyle">@style/Widget.MaterialComponents.TextInputEditText.*</item>\n</style>\n```\n\nor using one the style in the layout (affects only this text field):\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    style="@style/Widget.App.TextInputLayout">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n_**Note:** When setting a `materialThemeOverlay` on a custom `TextInputLayout`\nstyle, don\'t forget to set `editTextStyle` to either a\n`@style/Widget.MaterialComponents.TextInputEditText.*` style or to a custom one\nthat inherits from that.\n<br/>\nThe `TextInputLayout` styles set `materialThemeOverlay` that overrides\n`editTextStyle` with the specific `TextInputEditText` style needed. Therefore,\nyou don\'t need to specify a style tag on the edit text._\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        apiKey="zv034bdme9je7c9d43chzmc2yg"\n        platform="android"\n        storyParams={{"component":"textfield"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/textfield.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories/textfield.stories.jsx"})},920:function(module,exports,__webpack_require__){var map={"./button.stories.playground.jsx":921};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=920},921:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ExamplePlayground",(function(){return ExamplePlayground}));__webpack_require__(0);var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(30),_storybook_native_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(31),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(19);__webpack_exports__.default={title:"Button",argTypes:{label:"",variant:{control:{type:"select",options:["small","medium","large"]}},switch:"false",progress:{control:{type:"number",min:0,max:1,step:.2}}}};var ExamplePlayground=function ExamplePlayground(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_2__.EmulatorRenderer,{apiKey:"zv034bdme9je7c9d43chzmc2yg",platform:"android",storyParams:{component:"button"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};ExamplePlayground.displayName="ExamplePlayground",ExamplePlayground.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_1__.a,{markdown:'\x3c!--docs:\ntitle: "Buttons"\nlayout: detail\nsection: components\nexcerpt: "A customizable button component with updated visual styles."\niconId: materialbutton\npath: /catalog/buttons/\n--\x3e\n\n# Buttons\n\n[Buttons](https://material.io/components/buttons/) allow users to take actions,\nand make choices, with a single tap.\n\n!["Photo of tan stone archways above a modal bottom sheet titled "Walk below the\narches" with filled "Learn more" button"](assets/buttons/buttons_hero.png)\n\n**Contents**\n\n*   [Using buttons](#using-buttons)\n*   [Text button](#text-button)\n*   [Outlined button](#outlined-button)\n*   [Contained button](#contained-button)\n*   [Toggle button](#toggle-button)\n*   [Theming](#theming-buttons)\n\n## Using buttons\n\nBefore you can use Material buttons, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n_**Note:** `<Button>` is auto-inflated as\n`<com.google.android.material.button.MaterialButton>` via\n`MaterialComponentsViewInflater` when using a non-Bridge\n`Theme.MaterialComponents.*` theme._\n\n### Making buttons accessible\n\nButtons support content labeling for accessibility and are readable by most\nscreen readers, such as TalkBack. Text rendered in buttons is automatically\nprovided to accessibility services. Additional content labels are usually\nunnecessary.\n\nFor more information on content labels, go to the\n[Android accessibility help guide](https://support.google.com/accessibility/android/answer/7158690).\n\n### Types\n\nThere are four types of buttons: 1. [Text button](#text-button), 2.\n[Outlined button](#outlined-button), 3. [Contained button](#contained-button),\n4. [Toggle button](#toggle-button)\n\n!["Button types - text, outlined, contained and toggle."](assets/buttons/buttons_types.png)\n\n## Text button\n\n[Text buttons](https://material.io/components/buttons/#text-button) are\ntypically used for less-pronounced actions, including those located in dialogs\nand cards. In cards, text buttons help maintain an emphasis on card content.\n\n### Text button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a text button with a text label.\n\n!["Text button with purple text \'Text button\' over a white background."](assets/buttons/text-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    android:id="@+id/textButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Text button"\n    style="@style/Widget.MaterialComponents.Button.TextButton"\n/>\n```\n\nIn code:\n\n```kt\ntextButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to a text button\n\nThe following example shows a text button with an icon.\n\n!["Text button with purple text \'Text button\' and \'+\' icon over a white\nbackground."](assets/buttons/text-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    ...\n    app:icon="@drawable/ic_add_24dp"\n    style="@style/Widget.MaterialComponents.Button.TextButton.Icon"\n/>\n```\n\n### Anatomy and key properties\n\nA text button has a text label, a transparent container and an optional icon.\n\n![Text button anatomy diagram](assets/buttons/text_button_anatomy.png)\n\n1.  Text label\n2.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_text_btn_text_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceButton`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `@android:color/transparent` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_btn_bg_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `0dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorPrimary` at 12% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_btn_ripple_color.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_text_btn_text_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `4dp`\n\n#### Styles\n\n| Element                | Style                                                          |\n| ---------------------- | -------------------------------------------------------------- |\n| **Default style**      | `Widget.MaterialComponents.Button.TextButton`                  |\n| **Icon style**         | `Widget.MaterialComponents.Button.TextButton.Icon`             |\n| **Full Width Buttons** | `Widget.MaterialComponents.Button.TextButton.Dialog.FullWidth` |\n\nDefault style theme attribute: `?attr/borderlessButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Outlined button\n\n[Outlined buttons](https://material.io/components/buttons/#outlined-button) are\nmedium-emphasis buttons. They contain actions that are important, but aren’t the\nprimary action in an app.\n\n### Outlined button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows an outlined button with a text label and stroked\ncontainer.\n\n!["Outlined button with purple text \'Outlined button\' and grey border over a\nwhite background."](assets/buttons/outlined-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    android:id="@+id/outlinedButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Outlined button"\n    style="?attr/materialButtonOutlinedStyle"\n/>\n```\n\nIn code:\n\n```kt\noutlinedButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to an outlined button\n\nThe following example shows an outlined button with an icon.\n\n!["Outlined button with purple text \'Outlined button\', grey border and \'+\' icon\nover a white background."](assets/buttons/outlined-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    ...\n    app:icon="@drawable/ic_add_24dp"\n    style="@style/Widget.MaterialComponents.Button.OutlinedButton.Icon"\n/>\n```\n\n### Anatomy and key properties\n\nAn outlined button has a text label, a stroked container and an optional icon.\n\n![Outlined button anatomy diagram](assets/buttons/outlined_button_anatomy.png)\n\n1.  Text label\n2.  Container\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_text_btn_text_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceButton`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `@android:color/transparent` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_btn_bg_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `?attr/colorOnSurface` at 12% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_stroke_color_selector.xml))\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `1dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `0dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorPrimary` at 12% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_btn_ripple_color.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_text_btn_text_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `4dp`\n\n#### Styles\n\nElement           | Style\n----------------- | ------------------------------------------------------\n**Default style** | `Widget.MaterialComponents.Button.OutlinedButton`\n**Icon style**    | `Widget.MaterialComponents.Button.OutlinedButton.Icon`\n\nDefault style theme attribute: `?attr/materialButtonOutlinedStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Contained button\n\n[Contained buttons](https://material.io/components/buttons/#contained-button)\nare high-emphasis, distinguished by their use of elevation and fill. They\ncontain actions that are primary to your app.\n\n_**Note** The contained button is the default style if the style is not set._\n\n### Contained button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a contained button with a text label and a filled\ncontainer.\n\n!["Contained button with white text \'Contained button\' and purple container over\na white background."](assets/buttons/contained-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    android:id="@+id/containedButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Contained button"\n/>\n```\n\n_**Note:** Since this is the default type, you don\'t need to specify a style tag\nas long as you are using a Material Components Theme. If not, set the style to\n`@style/Widget.MaterialComponents.Button`._\n\nIn code:\n\n```kt\ncontainedButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to a contained button\n\nThe following example shows a contained button with an icon.\n\n!["Contained button with white text \'Contained button\', purple container and \'+\'\nicon over a white background."](assets/buttons/contained-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    ...\n    app:icon="@drawable/ic_add_24dp"\n    style="@style/Widget.MaterialComponents.Button.Icon"\n/>\n```\n\n### Anatomy and key properties\n\nA contained button has a text label, a filled container and an optional icon.\n\n![Contained button anatomy diagram](assets/buttons/contained_button_anatomy.png)\n\n1.  Text label\n2.  Container\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceButton`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_bg_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `2dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnPrimary` at 24% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_ripple_color.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/mtrl_btn_text_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `4dp`\n\n#### Styles\n\nElement                   | Style\n------------------------- | -------------------------------------------------------\n**Default style**         | `Widget.MaterialComponents.Button`\n**Icon style**            | `Widget.MaterialComponents.Button.Icon`\n**Unelevated style**      | `Widget.MaterialComponents.Button.UnelevatedButton`\n**Unelevated icon style** | `Widget.MaterialComponents.Button.UnelevatedButton.Icon`\n\nDefault style theme attribute: `?attr/materialButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Toggle button\n\n[Toggle buttons](https://material.io/components/buttons/#toggle-button) can be\nused to select from a group of choices.\n\nThere are two types of toggle buttons:\n\n*   [Toggle button](#toggle-button)\n*   [Icon](#icon)\n\n### Toggle button\n\nTo emphasize groups of related toggle buttons, a group should share a common\ncontainer.\n\n#### Toggle button examples\n\nAPI and source code:\n\n*   `MaterialButtonToggleGroup`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButtonToggleGroup)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButtonToggleGroup.java)\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a toggle button with three buttons that have text\nlabels.\n\n!["Toggle button example for Android with text labels - \'Button 1\', \'Button 2\'\nand \'Button 3\' - and grey/purple borders over a white\nbackground."](assets/buttons/toggle-button-text.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.button.MaterialButtonToggleGroup\n    android:id="@+id/toggleButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content">\n    <Button\n        android:id="@+id/button1"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 1"\n        style="?attr/materialButtonOutlinedStyle"\n    />\n    <Button\n        android:id="@+id/button2"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 2"\n        style="?attr/materialButtonOutlinedStyle"\n    />\n    <Button\n        android:id="@+id/button3"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 3"\n        style="?attr/materialButtonOutlinedStyle"\n    />\n</com.google.android.material.button.MaterialButtonToggleGroup>\n```\n\nIn code:\n\n```kt\ntoggleButton.addOnButtonCheckedListener { toggleButton, checkedId, isChecked ->\n    // Respond to button selection\n}\n```\n\n#### Implementing an icon-only toggle button\n\nThe following example shows a toggle button with three buttons that have icons.\n\n!["Toggle buttons with icons - heart, eye and bell - and grey/purple borders\nover a white background."](assets/buttons/toggle-button.png)\n\nIn `res/values/styles.xml`:\n\n```xml\n<style name="Widget.App.Button.OutlinedButton.IconOnly" parent="Widget.MaterialComponents.Button.OutlinedButton">\n    <item name="iconPadding">0dp</item>\n    <item name="android:insetTop">0dp</item>\n    <item name="android:insetBottom">0dp</item>\n    <item name="android:paddingLeft">12dp</item>\n    <item name="android:paddingRight">12dp</item>\n    <item name="android:minWidth">48dp</item>\n    <item name="android:minHeight">48dp</item>\n</style>\n```\n\nIn the layout:\n\n```xml\n<com.google.android.material.button.MaterialButtonToggleGroup\n    ...>\n    <Button\n        ...\n        app:icon="@drawable/ic_favorite_24dp"\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n    />\n    <Button\n        ...\n        app:icon="@drawable/ic_remove_red_eye_24dp"\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n    />\n    <Button\n        ...\n        app:icon="@drawable/ic_notifications_24dp"\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n    />\n</com.google.android.material.button.MaterialButtonToggleGroup>\n```\n\n### Anatomy and key properties\n\nA toggle button has a shared stroked container, icons and/or text labels.\n\n![Toggle button anatomy](assets/buttons/toggle_button_anatomy.png)\n\n1.  Container\n2.  Icon\n\n#### Selection attributes\n\nElement                | Attribute               | Related method(s)                                | Default value\n---------------------- | ----------------------- | ------------------------------------------------ | -------------\n**Single selection**   | `app:singleSelection`   | `setSingleSelection`<br/>`isSingleSelection`     | `false`\n**Selection required** | `app:selectionRequired` | `setSelectionRequired`<br/>`isSelectionRequired` | `false`\n\n#### Styles\n\nElement           | Style\n----------------- | -----------------------------------------------------\n**Default style** | `Widget.MaterialComponents.MaterialButtonToggleGroup`\n\nDefault style theme attribute: `?attr/materialButtonToggleGroupStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n### Icon\n\nIcons can be used as toggle buttons when they allow selection, or deselection,\nof a single choice, such as marking an item as a favorite.\n\n#### Icon example\n\nAPI and source code:\n\n*   `CheckBox`\n    *   [Class description](https://developer.android.com/reference/android/widget/CheckBox)\n\n_**Note** The `CheckBox` API is just one of several inputs that can implement\nthe icon button. See other\n[selection controls](https://material.io/components/selection-controls/) for\nmore details._\n\nThe following example shows an icon that can be used independently or in items\nof a `RecyclerView`.\n\n![Toggle icon example showing 4 images, heart icon in the upper-right corner of\neach image](assets/buttons/android_toggle_button.png)\n\nIn the layout:\n\n```xml\n<CheckBox\n    android:id="@+id/icon"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:button="@drawable/sl_favourite_24dp"\n    app:buttonTint="@android:color/white"\n/>\n```\n\nIn `res/drawable/sl_favourite_24dp.xml`:\n\n```xml\n<selector>\n    <item\n        android:drawable="@drawable/ic_favourite_outlined_24dp"\n        android:state_checked="false"\n    />\n    <item\n        android:drawable="@drawable/ic_favourite_filled_24dp"\n        android:state_checked="true"\n    />\n    <item android:drawable="@drawable/ic_favourite_outlined_24dp" />\n</selector>\n```\n\nIn code:\n\n```kt\nicon.setOnCheckedChangeListener { checkBox, isChecked ->\n    // Respond to icon toggle\n}\n```\n\n## Theming buttons\n\nButtons support\n[Material Theming](https://material.io/components/buttons/#theming) and can be\ncustomized in terms of color, typography and shape.\n\n### Button theming example\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows text, outlined and contained button types with\nMaterial Theming.\n\n!["Button theming with three buttons - text, outlined and contained - with pink\ncolor theming and cut corners."](assets/buttons/button-theming.png)\n\n#### Implementing button theming\n\nUsing theme attributes and styles in `res/values/styles.xml` (themes all buttons\nand affects other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n    <item name="textAppearanceButton">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="TextAppearance.App.Button" parent="TextAppearance.MaterialComponents.Button">\n    <item name="fontFamily">@font/rubik</item>\n    <item name="android:fontFamily">@font/rubik</item>\n</style>\n\n<style name="ShapeAppearance.App.SmallComponent" parent="ShapeAppearance.MaterialComponents.SmallComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">4dp</item>\n</style>\n```\n\nor using default style theme attributes, styles and theme overlays (themes all\nbuttons but does not affect other components):\n\n```xml\n<style name="Theme.App" parent="Theme.MaterialComponents.*">\n    ...\n    <item name="borderlessButtonStyle">@style/Widget.App.Button.TextButton</item>\n    <item name="materialButtonOutlinedStyle">@style/Widget.App.Button.OutlinedButton</item>\n    <item name="materialButtonStyle">@style/Widget.App.Button</item>\n</style>\n\n<style name="Widget.App.Button.TextButton" parent="Widget.MaterialComponents.Button.TextButton">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button.TextButton</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="Widget.App.Button.OutlinedButton" parent="Widget.MaterialComponents.Button.OutlinedButton">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button.TextButton</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="Widget.App.Button" parent="Widget.MaterialComponents.Button">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="ThemeOverlay.App.Button.TextButton" parent="">\n    <item name="colorPrimary">@color/shrine_pink_900</item>\n</style>\n\n<style name="ThemeOverlay.App.Button" parent="">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n</style>\n```\n\nor using one of the styles in the layout (affects only this button):\n\n```xml\n<Button\n    ...\n    style="@style/Widget.App.Button"\n/>\n```\n'})}}},ExamplePlayground.args={label:"Default",variant:"small",switch:!1},ExamplePlayground.__docgenInfo={description:"",methods:[],displayName:"ExamplePlayground"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/button.stories.playground.jsx"]={name:"ExamplePlayground",docgenInfo:ExamplePlayground.__docgenInfo,path:"stories/button.stories.playground.jsx"})},925:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var preview_namespaceObject={};__webpack_require__.r(preview_namespaceObject),__webpack_require__.d(preview_namespaceObject,"decorators",(function(){return decorators}));__webpack_require__(11),__webpack_require__(29),__webpack_require__(51),__webpack_require__(857),__webpack_require__(46),__webpack_require__(47),__webpack_require__(858),__webpack_require__(859),__webpack_require__(16);var client_api=__webpack_require__(137),esm=__webpack_require__(6),decorators=[__webpack_require__(500).DeviceDecorator];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.keys(preview_namespaceObject).forEach((function(key){var value=preview_namespaceObject[key];switch(key){case"args":case"argTypes":return esm.a.warn("Invalid args/argTypes in config, ignoring.",JSON.stringify(value));case"decorators":return value.forEach((function(decorator){return Object(client_api.b)(decorator,!1)}));case"loaders":return value.forEach((function(loader){return Object(client_api.c)(loader,!1)}));case"parameters":return Object(client_api.d)(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({},value),!1);case"argTypesEnhancers":return value.forEach((function(enhancer){return Object(client_api.a)(enhancer)}));case"globals":case"globalTypes":var v={};return v[key]=value,Object(client_api.d)(v,!1);default:return console.log(key+" was not supported :( !")}}))}},[[503,2,3]]]);